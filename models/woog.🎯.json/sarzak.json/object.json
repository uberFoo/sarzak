[
  {
    "description": "Parameter\n\nA parameter is an input to a function.",
    "id": "6fc2a3e2-addc-5047-8dd0-245eca56d98b",
    "key_letters": "PARAM",
    "name": "Parameter"
  },
  {
    "description": "Method\n\nThis represents a function's signature. We don't (yet) care about the body of the function. We are however very interested in it's type, which implies parameters and their types, as well as our return type. \n\nLooking at this more closely, I think that this should be related to a parameter list, and the list related to the string of parameters. It may just be a nit, but it does bother me a bit. I'll come back and fix it once it's less troublesome to generate this domain.\n\nThe function in question is a method, hanging off of an [`Object`][o].\n\n[o][damn, now I need a documentation server].",
    "id": "161bb7a3-47f4-54ef-b0d9-a331f0f1f7e3",
    "key_letters": "METH",
    "name": "Object Method"
  },
  {
    "description": "An `Object` is a collection of related data. By creating `Object`s, and \nconnecting them with `Relationships` we build a powerful abstraction.\n\n`Object`s contain [Attribute]s that represent the data that the \n`Object`encapsulates. All `Object`s have an attribute called `id`, which \nis a unique idenifier for each class of `Object`. The `id` attribute is a\nversion 5 UUID.\n\n# Object imported from the sarzak Domain.\n\nWe don‚Äôt have a means of representing this as imported in Cuckoo, so I‚Äôm just adding it here.\n\nüê∂ { \"imported_object\": { \"domain\": \"v2::sarzak\", \"model_file\": \"models/sarzak.json\", \"id\": \"7178e7a4-5131-504b-a7b3-c2c0cfedf343\"}}",
    "id": "7178e7a4-5131-504b-a7b3-c2c0cfedf343",
    "key_letters": "OBJ",
    "name": "Object"
  },
  {
    "description": "A Macro Invocation\n\nThis is here for completeness, and I doubt that I'll ever actually use it. See [the documentation](https://doc.rust-lang.org/reference/macros.html#macro-invocation).",
    "id": "4ca3edd9-3cd8-5c78-a351-21afd1f1776c",
    "key_letters": "S_M",
    "name": "Macro"
  },
  {
    "description": "Value Access\n\nThis is what I'm calling the combined ideas of mutability and visibility.",
    "id": "1ee2ad4c-9a62-504e-83aa-56913e35d6a2",
    "key_letters": "ACC",
    "name": "Access"
  },
  {
    "description": "An Item\n\nThis [entails a lot](https://doc.rust-lang.org/reference/items.html) of  syntax that I'm just rolling up into one for now. We'll see for how long I can manage to get away with this. üòé",
    "id": "e1f7218f-827b-5d67-ad29-b30e9a35cd5d",
    "key_letters": "S_ITM",
    "name": "Item"
  },
  {
    "description": "Mutable\n\nThe type is declared as `mut`.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "608ed052-4176-5ec1-b467-09562104ac60",
    "key_letters": "M_MUT",
    "name": "Mutable"
  },
  {
    "description": "Expression Statement\n\nA [statement](https://doc.rust-lang.org/reference/statements.html#expression-statements) used for it's side effects.\n\nI'd prefer to call this just `Expression`, but that would break things. Here's an [issue to address the limitation.](https://git.uberfoo.com/sarzak/grace/-/issues/44)",
    "id": "3d58061a-22cc-52b8-b236-647bec07eac8",
    "key_letters": "S_EXP",
    "name": "Expression Statement"
  },
  {
    "description": "An expression\n\nAn expression produces a value. There are all sorts of expressions, and I'm only going to cover a very few for now.\n\nThe expressions here roughly align with what's found in [rust](https://doc.rust-lang.org/reference/expressions.html).",
    "id": "9a156069-2f33-5501-b0d0-a710b71a1f9f",
    "key_letters": "EXP",
    "name": "Expression"
  },
  {
    "description": "A Function Call\n\nThis is [formally](https://doc.rust-lang.org/reference/expressions/call-expr.html) a call expression.",
    "id": "0df72b13-f4a0-5e43-ad0f-b3675300665d",
    "key_letters": "E_CALL",
    "name": "Call"
  },
  {
    "description": "Borrowed\n\nThe type is declared as borrowed.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "46904a8d-0a08-5336-95c8-f844120dfc65",
    "key_letters": "M_BWD",
    "name": "Borrowed"
  },
  {
    "description": "Private Visibility\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "2dda207d-0769-5bd8-a809-cf168b970788",
    "key_letters": "V_PRIV",
    "name": "Private"
  },
  {
    "description": "Grace Model Compiler Type\n\nThe model compiler domain contains at least one type that doesn't make sense within the modeling domain. That type is an object reference. References, in my mind, have no place in a modeling domain.\n\nSo that's what this is about.",
    "id": "cb15feea-cdc3-5dda-95fe-b8bf1141f943",
    "key_letters": "GT",
    "name": "Grace Type"
  },
  {
    "description": "A Value\n\nI consider a value as an abstraction for a chunk of memory. By upgrading some bytes to a `Value` you gain meaning and utility.\n\nThe meaning comes from assigning type information to the ones and zeros. From a modeling perspective it is good enough to think in terms of [`Type`], which is just a general hint about the domain of the value. When we get to generating code we require lower level information, which is why we have [`GraceType`].\n\nThe utility are completely compiler/language level constructs. These are [`Mutability`] and [`Visibility`].",
    "id": "fac06cd5-a23e-568a-bc0d-912ff2e6faac",
    "key_letters": "VAL",
    "name": "Value"
  },
  {
    "description": "An optional Type\n\nIn rust this is wrapped in an [`Option<T>`].",
    "id": "d511530a-0b5a-5dcf-b5ba-50149db0444a",
    "key_letters": "GT_OPT",
    "name": "Option"
  },
  {
    "description": "Let Statement\n\nA means of assigning a variable to an expression. I don't think that I'll ever deal with the pattern stuff [a full implementation](https://doc.rust-lang.org/reference/statements.html#let-statements) would require.",
    "id": "90d6e6e1-0821-5f73-8ed2-94db2d944869",
    "key_letters": "S_LET",
    "name": "Let"
  },
  {
    "description": "A Literal Expression\n\nIt's literally, a literal. Like that? ü§£",
    "id": "feaca6d4-6777-5ced-ab37-82a60e25bf90",
    "key_letters": "E_LIT",
    "name": "Literal"
  },
  {
    "description": "Type Ownership\n\nThis is tied closely with Rust. There are tthree possible options: owned, mutable and borrowed.",
    "id": "0ad03d1f-4171-57c9-8c36-2c369e2e5819",
    "key_letters": "OWN",
    "name": "Ownership"
  },
  {
    "description": "Crate Visibility\n\nThe item is visibile within the crate.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "8b225ee5-831b-5cbc-a664-92a4478c429f",
    "key_letters": "V_CRATE",
    "name": "Crate"
  },
  {
    "description": "A Variable\n\nBasically a name given to some memory.",
    "id": "21200c99-3655-5ae9-be78-fc160f36cb74",
    "key_letters": "VAR",
    "name": "Variable"
  },
  {
    "description": "The type of a value\n\nThere are several values available: [Integer], [Boolean], [Float], [String], and [UUID].\n\n# Object imported from the sarzak Domain.\n\nWe don‚Äôt have a means of representing this as imported in Cuckoo, so I‚Äôm just adding it here.\n\nüê∂ { \"imported_object\": { \"domain\": \"v2::sarzak\", \"model_file\": \"models/sarzak.json\", \"id\": \"b8ec6afc-ddbd-53d6-9be3-e4b738941c2f\"}}\n",
    "id": "b8ec6afc-ddbd-53d6-9be3-e4b738941c2f",
    "key_letters": "T",
    "name": "Type"
  },
  {
    "description": "Item Visibility\n\nThis is a _very_ Rust-centric type. It represents the visibility levels that Rust surfaces.\n\nPrivate is the default, and requires no modifiers. Public is the most open, and indicated by prefixing the item with \"pub\". In the middle is \"pub(crate)\", which makes the item public within the crate.",
    "id": "f1aba8e3-f2cb-53de-8ded-8a2dbd94a468",
    "key_letters": "VIZ",
    "name": "Visibility"
  },
  {
    "description": "Public Visibility\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "7d077cfb-442c-5982-973c-b77a5a26f009",
    "key_letters": "V_PUB",
    "name": "Public"
  },
  {
    "description": "A Statement\n\nThere aren't all that many types of [statement in rust.](https://doc.rust-lang.org/reference/statements.html).",
    "id": "278175ef-e4f8-5bf5-a4dd-f2a5880e146c",
    "key_letters": "STMT",
    "name": "Statement"
  },
  {
    "description": "An owned value\n\nSomeone has to be responsible for it, right?",
    "id": "8e82a8e4-bae2-5b7a-9ca4-e2fd3a1eac7e",
    "key_letters": "M_OWN",
    "name": "Owned"
  },
  {
    "description": "A Block Expression\n\nThis is a block of code, you know, between `{` and `}`. See the [reference](https://doc.rust-lang.org/reference/expressions/block-expr.html).",
    "id": "f413fb84-7404-51b2-bb95-02863622c4b1",
    "key_letters": "E_BLK",
    "name": "Block"
  },
  {
    "description": "A Reference\n\nSpecifically this is a reference to something that was translated from an [`Object`]. In rust that's a `struct` or an `enum`.\n",
    "id": "87ee8741-f992-53fd-9c54-ba7f26935968",
    "key_letters": "GT_REF",
    "name": "Reference"
  },
  {
    "description": "A Local Variable\n\nA plain old variable. It's got a name.\n\nAt some point I'm going to have to start thinking about scopes. ü§î",
    "id": "34f6f28f-92db-5598-8234-f6ddad9cea4f",
    "key_letters": "VAR_L",
    "name": "Local"
  }
]