[
  {
    "description": "This object represents the *supertype* in a *supertype-subtype* \nrelationship.",
    "id": "a9cc5d3e-8431-5302-9296-1fbd789acf73",
    "key_letters": "R_SUP",
    "name": "Supertype"
  },
  {
    "description": "A `Relationship` indicates that a set of objects are connected to each other in some manner. Typically it is a _real world_ relationship. In the \ncase of this model it is strictly an abstraction.\n\nThere are three types of `Relationship`: [`Isa`], [`Binary`], and [`Associative`]. Thus `Relationship` is itself the *supertype* in an [`Isa`] relationship. It is a partitioning *supertype-subtype* relationship, rather one of inheritance. As such, it‚Äôs  perfectly suited to a rust `enum`! üòÉ",
    "id": "469d77d1-9ede-5919-923d-b007d614af26",
    "key_letters": "R",
    "name": "Relationship"
  },
  {
    "description": "This is the side of a binary relationship that is doing the pointing, thus it contains the referential attribute. It is connected to the ‚Äúfrom‚Äù side of a binary relationship.",
    "id": "9c75abf3-b77e-56ee-a19c-d812898b5eaa",
    "key_letters": "R_FROM",
    "name": "Referrer"
  },
  {
    "description": "The Boolean Type\n\nThis type holds `true` and `false` values. This type is just a placeholder. It's implementation is determined downstream by the code generator.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "04fbbc6c-a351-5e6d-b193-191f5510033e",
    "key_letters": "T_BOOL",
    "name": "Boolean"
  },
  {
    "description": "A constant value that indicates a conditionality of _conditional_.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "cbd5902d-d04b-537f-9d6a-547a3b88f9a2",
    "key_letters": "COND_C",
    "name": "Conditional"
  },
  {
    "description": "External Type\n\nThis may literally be anything. It's used during code generation to generate variables names and type names for things that are outside of a modeled domain. For example, a timer would be an external type. The specifics of how it is used is up to the model compiler.\n\nIn grace, the `name` attribute is used during code generation to create variable names by converting it to `snake_case`. When used as a type, it is converted to `UpperCamelCase`.\n\nWe use `path` as the path is a `use` statement.\n\nI'm updating this while trying to use it, so this description is going to be rather incoherent until things settle down.\n\nThe way I'm using this, and hopefully the way that will always accommodate, is as a singleton within a particular function scope. Maybe it's a system-wide singleton? I dunno. But it's a singleton.",
    "id": "ab607ed4-66f7-5927-b42e-f48c07a1764a",
    "key_letters": "T_EXT",
    "name": "External"
  },
  {
    "description": "The type of a value\n\nThere are several values available: [Integer], [Boolean], [Float], [String], and [UUID].",
    "id": "b8ec6afc-ddbd-53d6-9be3-e4b738941c2f",
    "key_letters": "T",
    "name": "Type"
  },
  {
    "description": "An `Object` is a collection of related data. By creating `Object`s, and \nconnecting them with `Relationships` we build a powerful abstraction.\n\n`Object`s contain [Attribute]s that represent the data that the \n`Object`encapsulates. All `Object`s have an attribute called `id`, which \nis a unique identifier for each class of `Object`. The `id` attribute is a\nversion 5 UUID.\n\nüê∂ {\"derive\": [\"Clone\", \"Debug\", \"Deserialize\", \"Eq\", \"Hash\", \"PartialEq\", \"Serialize\"]}\n",
    "id": "7178e7a4-5131-504b-a7b3-c2c0cfedf343",
    "key_letters": "OBJ",
    "name": "Object"
  },
  {
    "description": "The Integer Type\n\nThis is an interger that can hold positive and negative values. This type is just a placeholder. It's implementation is determined downstream by the code generator.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "fae606a2-e37c-5f82-8754-1fc11c09fe4c",
    "key_letters": "T_INT",
    "name": "Integer"
  },
  {
    "description": "The UUID Type\n\nI feel like there are too many implementation details here. \n\nThis UUID is expected to be version 5. Generally we produce input\nto the hash function from other UUIDs, coupled with additional \ninformation from the creator to ensure a unique UUID.\n\nThe `ns` attribute is the namespace used to generate generate UUIDs\ngiven a particular instance of `UUID`.\n\n‚ùóÔ∏è{\"singleton_object\": true, \"translation_name\": \"SarzakUuid\"}",
    "id": "9fcf72a7-a28e-5544-be44-af4de72db6e4",
    "key_letters": "T_UUID",
    "name": "UUID"
  },
  {
    "description": "A `Binary` relationship, as it‚Äôs name implies, is a relationship between\ntwo objects. It consists of two parts, the `Dependent` end of the \nrelationship and the `Independent` end.\n\nThe former is so named because it has the job of formalizing the\nrelationship. It stores a pointer to the independent object as an attribute.\n\nThe latter is aware of the relationship, but it does not store any \ninformation about the relationship. That said, there are means of\ntraversing the relationship from the `Independent` object. ",
    "id": "56c5ed80-25e7-592e-ab36-a306c78ac58b",
    "key_letters": "R_BIN",
    "name": "Binary"
  },
  {
    "description": "The Floating Point Type\n\nThis type holds numbers from ‚Ñù. This type is just a placeholder. It's implementation is determined downstream by the code generator.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "f3d5c0a4-850d-5071-a7e3-50e53389e3a8",
    "key_letters": "T_FLOAT",
    "name": "Float"
  },
  {
    "description": "",
    "id": "438b6783-15d1-5767-af60-900b3738fc9e",
    "key_letters": "COND",
    "name": "Conditionality"
  },
  {
    "description": "An Event that Does Something\n\nAn acknowledged event is an event that a [`State`] knows how to handle.",
    "id": "2979402f-0980-58b6-9601-62f931e7f368",
    "key_letters": "ACK",
    "name": "Acknowledged Event"
  },
  {
    "description": "",
    "id": "d1b45eb7-b9fb-5fbc-90a5-f48473675fdb",
    "key_letters": "CARD",
    "name": "Cardinality"
  },
  {
    "description": "The other objects in an Associative Relationship\n\nThis represents one of the two objects that are related in an [`Associative`] relationhip. ",
    "id": "e38511e6-1f25-503c-bf93-508885852440",
    "key_letters": "ASS_TO",
    "name": "Associative Referent"
  },
  {
    "description": "Associative Object\n\nThis is used in an [`Associative`] relationship to point to the Associative object itself. It's the box with the line pointing at another line.",
    "id": "faa5a05c-7252-5b3d-b415-ad3884269154",
    "key_letters": "ASS_FROM",
    "name": "Associative Referrer"
  },
  {
    "description": "An event is sent to an object, and processed by the current state. Assuming it accepts the event. Otherwise it‚Äôs dropped on the floor.",
    "id": "dbdfade4-b61a-5e69-ab1a-c4d10e61bedd",
    "key_letters": "E",
    "name": "Event"
  },
  {
    "description": "An `Attribute` represents a single value. Each value must have a \n[`Type`], which constrains the values of data that may be assigned to\nan `Attribute`.",
    "id": "63777957-b6bc-5253-b16b-6ff390f10dba",
    "key_letters": "A",
    "name": "Attribute"
  },
  {
    "description": "",
    "id": "0cbeeb50-21ce-5e83-9f2e-65d1410d553f",
    "key_letters": "R_ISA",
    "name": "Isa"
  },
  {
    "description": "A constant value that indicates a cardinality of _one_.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "696b0652-8c4d-56d9-b4dc-0490cd4b2ea0",
    "key_letters": "CARD_O",
    "name": "One"
  },
  {
    "description": "The *subtype* in a *supertype-subtype* relationship.",
    "id": "3abf0e04-6c8c-5e25-9638-43d98738ef87",
    "key_letters": "R_SUB",
    "name": "Subtype"
  },
  {
    "description": "This is the side being referred to in a binary relationship. It is the ‚Äúto‚Äù side.",
    "id": "952d24ad-ce6a-5812-8c6c-33ff9d2b424d",
    "key_letters": "R_TO",
    "name": "Referent"
  },
  {
    "description": "",
    "id": "17de0bb6-ee65-5516-b8eb-9a9a35e5fedd",
    "key_letters": "R_ASSOC",
    "name": "Associative"
  },
  {
    "description": "A constant value that indicates a cardinality of _many_.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "a549f635-38bd-5016-b79f-b03125fbfc02",
    "key_letters": "CARD_M",
    "name": "Many"
  },
  {
    "description": "An [Object] state, more precisely, a set of states, is where all the action happens.",
    "id": "63af1589-c7cf-50b2-ad7b-d30208ebfec4",
    "key_letters": "S",
    "name": "State"
  },
  {
    "description": "The String Type\n\nThis type holds unicode characters. This type is just a placeholder. It's implementation is determined downstream by the code generator.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "9803e73c-4984-5179-8460-529fe4ef7921",
    "key_letters": "T_STR",
    "name": "String"
  },
  {
    "description": "A constant value that indicates a conditionality of _unconditional_.\n\n‚ùóÔ∏è{\"singleton_object\": true}",
    "id": "ab790409-b7ca-58d0-bb97-7c2ddd7b786f",
    "key_letters": "COND_U",
    "name": "Unconditional"
  }
]