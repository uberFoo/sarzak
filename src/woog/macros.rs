//! Macros for navigating the "Woog" domain
//!
//! # Generated Code -- edit _with care_.
//!
//! Don't mess with anything between `{"magic":"îž¨","kind":"CriticalBlockBegin"}`
//! and `{"magic":"îž¨","kind":"CriticalBlockEnd"}`. Otherwise, you should be free
//! to go wild. Happy hacking!
//!
//! Use the following invocation to reproduce:
// {"magic":"îž¨","kind":"IgnoreBlockBegin"}
//! ```shell
//!  sarzak gen -d woog sarzak -e false -m true -d true -i true
//! ```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
// {"magic":"îž¨","version":"1.0.0"}

/// Macro to traverse [`ObjectMethod`][ðŸ¦€] âž¡ [`Parameter`][ðŸ¦ž], via _R5(c)_
///
/// This macro expects a &[`ObjectMethod`][ðŸ¦€], and returns an Option<&[`Parameter`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::woog::types::ObjectMethod
/// [ðŸ¦ž]: crate::woog::types::Parameter
// {"magic":"îž¨","kind":"IgnoreBlockBegin":{"is_uber":true}}
///
/// # Example
///
///```
/// # use sarzak::woog::ObjectMethod;
/// # use sarzak::sarzak::Object;
/// # use sarzak::woog::Parameter;
/// # use sarzak::sarzak::Type;
/// # use sarzak::woog_maybe_get_many_params_across_r5;
/// # let mut store = sarzak::woog::ObjectStore::new();
/// # let mut sarzak_store = sarzak::sarzak::ObjectStore::new();
///
/// let type_efe = Type::test_default(&mut sarzak_store);
///
/// let sticky_tank = "gamy_volcano".to_owned();
/// let parameter = Parameter::new(&mut store, None, &type_efe, sticky_tank);
/// let gaudy_holiday = "finicky_beetle".to_owned();
/// let delicious_animal = "bad_hate".to_owned();
/// let toothsome_soda = "permissible_arch".to_owned();
/// let object_dmz = Object::default();
///
/// let type_grc = Type::test_default(&mut sarzak_store);
///
/// let hard_dust = "ultra_goose".to_owned();
/// let superb_cloth = "lean_jail".to_owned();
/// let type_rxg = Type::test_default(&mut sarzak_store);
///
/// let obese_shoe = "erratic_exchange".to_owned();
///
/// let object_method = ObjectMethod::new(&mut store, Some(&parameter), &object_dmz, &type_grc, hard_dust, superb_cloth);
///
/// let parameter_yqs = woog_maybe_get_many_params_across_r5!(object_method, store);
/// assert_eq!(Some(&&parameter), parameter_yqs.iter().next());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"woog_maybe_get_many_params_across_r5-emit_binary_main"}}}
macro_rules! woog_maybe_get_many_params_across_r5 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"parameter-emit_many_unconditional"}}}
        // nut::codegen::template::macros::emit_many_unconditional
        let mut result = Vec::new();
        for z in &$input.param {
            let param = $store.exhume_parameter(&z).unwrap();
            result.push(param);
        }
        result
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"parameter-emit_many_unconditional"}}}
    }};
}
pub use woog_maybe_get_many_params_across_r5;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"woog_maybe_get_many_params_across_r5-emit_binary_main"}}}

/// Macro to traverse [`Parameter`][ðŸ¦€] âž¡ [`ObjectMethod`][ðŸ¦ž], via _R5_
///
/// This macro expects a &[`Parameter`][ðŸ¦€], and returns a &[`ObjectMethod`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::woog::types::Parameter
/// [ðŸ¦ž]: crate::woog::types::ObjectMethod
// {"magic":"îž¨","kind":"IgnoreBlockBegin":{"is_uber":true}}
///
/// # Example
///
///```
/// # use sarzak::woog::Parameter;
/// # use sarzak::woog::ObjectMethod;
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak::Object;
/// # use sarzak::woog_get_one_meth_across_r5;
/// # let mut store = sarzak::woog::ObjectStore::new();
/// # let mut sarzak_store = sarzak::sarzak::ObjectStore::new();
///
/// let type_ptp = Type::test_default(&mut sarzak_store);
///
/// let permissible_fire = "upset_bean".to_owned();
/// let type_bgd = Type::test_default(&mut sarzak_store);
///
/// let greasy_wind = "spectacular_girl".to_owned();
/// let parameter = Parameter::new(&mut store, None, &type_bgd, greasy_wind);
/// let squeamish_library = "cut_sticks".to_owned();
/// let useful_sock = "hapless_increase".to_owned();
/// let broad_copper = "tan_orange".to_owned();
/// let object_jra = Object::default();
///
/// let type_qxf = Type::test_default(&mut sarzak_store);
///
/// let tender_shock = "bewildered_drawer".to_owned();
/// let psychedelic_ball = "rich_sand".to_owned();
///
/// let object_method = ObjectMethod::new(&mut store, Some(&parameter), &object_jra, &type_qxf, tender_shock, psychedelic_ball);
///
/// let object_method_lvt = woog_get_one_meth_across_r5!(parameter, store);
/// assert_eq!(&object_method, object_method_lvt);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"woog_get_one_meth_across_r5-emit_binary_main"}}}
macro_rules! woog_get_one_meth_across_r5 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"parameter-object_method-emit_one_unconditional_lookup", "is_uber":true}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_object_method()
            .find(|z| z.1.param == Some($input.id))
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"parameter-object_method-emit_one_unconditional_lookup"}}}
    }};
}
pub use woog_get_one_meth_across_r5;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"woog_get_one_meth_across_r5-emit_binary_main"}}}

/// Macro to traverse [`Parameter`][ðŸ¦€] âž¡ [`Parameter`][ðŸ¦ž], via _R1(c)_
///
/// This macro expects a &[`Parameter`][ðŸ¦€], and returns an Option<&[`Parameter`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::woog::types::Parameter
/// [ðŸ¦ž]: crate::woog::types::Parameter
// {"magic":"îž¨","kind":"IgnoreBlockBegin":{"is_uber":true}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Type;
/// # use sarzak::woog::Parameter;
/// # use sarzak::woog_maybe_get_one_param_across_r1;
/// # let mut store = sarzak::woog::ObjectStore::new();
/// # let mut sarzak_store = sarzak::sarzak::ObjectStore::new();
///
/// let type_ytx = Type::test_default(&mut sarzak_store);
///
/// let smart_knee = "mountainous_fireman".to_owned();
/// let type_iax = Type::test_default(&mut sarzak_store);
///
/// let loose_ornament = "wasteful_tax".to_owned();
///
/// let parameter = Parameter::new(&mut store, None, &type_ytx, smart_knee);
/// let parameter_0 = Parameter::new(&mut store, Some(&parameter), &type_ytx, "smart_knee".to_owned());
///
/// let parameter_xmu = woog_maybe_get_one_param_across_r1!(parameter_0, store);
/// assert_eq!(Some(&parameter), parameter_xmu);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"woog_maybe_get_one_param_across_r1-emit_binary_main"}}}
macro_rules! woog_maybe_get_one_param_across_r1 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"parameter-emit_one_conditional"}}}
        // nut::codegen::template::macros::emit_one_conditional
        match &$input.next {
            Some(i) => $store.exhume_parameter(i),
            None => None,
        }
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"parameter-emit_one_conditional"}}}
    }};
}
pub use woog_maybe_get_one_param_across_r1;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"woog_maybe_get_one_param_across_r1-emit_binary_main"}}}

/// Macro to traverse [`Parameter`][ðŸ¦€] âž¡ [`Parameter`][ðŸ¦ž], via _R1_
///
/// This macro expects a &[`Parameter`][ðŸ¦€], and returns a &[`Parameter`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::woog::types::Parameter
/// [ðŸ¦ž]: crate::woog::types::Parameter
// {"magic":"îž¨","kind":"IgnoreBlockBegin":{"is_uber":true}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Type;
/// # use sarzak::woog::Parameter;
/// # use sarzak::woog_get_one_param_across_r1;
/// # let mut store = sarzak::woog::ObjectStore::new();
/// # let mut sarzak_store = sarzak::sarzak::ObjectStore::new();
///
/// let type_etn = Type::test_default(&mut sarzak_store);
///
/// let abiding_jar = "soft_celery".to_owned();
/// let type_ewj = Type::test_default(&mut sarzak_store);
///
/// let cut_farm = "temporary_anger".to_owned();
///
/// let parameter = Parameter::new(&mut store, None, &type_ewj, cut_farm);
/// let parameter_0 = Parameter::new(&mut store, Some(&parameter), &type_ewj, "cut_farm".to_owned());
///
/// let parameter_xpd = woog_get_one_param_across_r1!(parameter, store);
/// assert_eq!(&parameter_0, parameter_xpd);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"woog_get_one_param_across_r1-emit_binary_main"}}}
macro_rules! woog_get_one_param_across_r1 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"parameter-parameter-emit_one_unconditional_lookup", "is_uber":true}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_parameter()
            .find(|z| z.1.next == Some($input.id))
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"parameter-parameter-emit_one_unconditional_lookup"}}}
    }};
}
pub use woog_get_one_param_across_r1;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"woog_get_one_param_across_r1-emit_binary_main"}}}
