//! Sarzak Domain
//!
//! This file was generated by: `sarzak new "sarzak"`.
use uuid::{uuid, Uuid};

#[cfg(feature = "v1")]
mod v1;

#[cfg(feature = "v1")]
pub use v1::store::ObjectStore;
#[cfg(feature = "v1")]
pub use v1::types::*;

#[cfg(feature = "v1")]
pub use v1::macros;
#[cfg(feature = "v1")]
pub use v1::store;
#[cfg(feature = "v1")]
pub use v1::types;

mod store;
mod types;
mod v1;

use store::ObjectStore;

// sarzak
pub const UUID_NS: Uuid = uuid!("daccabb9-eb3a-5cde-ba7c-19a3f22ab649");

pub fn init_instances(store: &mut ObjectStore) {
    use types::*;
    // Create instances of primitives missing from nut::sarzak that
    // the extrusion process depends upon.
    store.inter_cardinality(Cardinality::One(ONE));
    store.inter_cardinality(Cardinality::Many(MANY));

    store.inter_conditionality(Conditionality::Conditional(CONDITIONAL));
    store.inter_conditionality(Conditionality::Unconditional(UNCONDITIONAL));

    store.inter_ty(Ty::Integer(INTEGER));
    store.inter_ty(Ty::Boolean(BOOLEAN));
    store.inter_ty(Ty::Float(FLOAT));
    store.inter_ty(Ty::String(STRING));
    store.inter_ty(Ty::Uuid(UUID));
}
