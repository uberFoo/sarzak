//! Macros for navigating the "Sarzak" domain
//!
//! # Generated Code -- edit _with care_.
//!
//! Don't mess with anything between `{"magic":"îž¨","kind":"CriticalBlockBegin"}`
//! and `{"magic":"îž¨","kind":"CriticalBlockEnd"}`. Otherwise, you should be free
//! to go wild. Happy hacking!
//!
//! Use the following invocation to reproduce:
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
//! ```shell
//!  sarzak gen
//! ```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
// {"magic":"îž¨","version":"0.5.0"}
// {"magic":"îž¨","version":"1.0.0"}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R17_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_get_one_obj_across_r17;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_vpb = Conditionality::test_default(&mut store);
/// let rainy_dog = "gaping_week".to_owned();
/// let third_drink = "periodic_story".to_owned();
/// let slippery_books = "rebel_guide".to_owned();
/// let object_xpr = Object::new(&mut store, rainy_dog, third_drink, slippery_books);
/// let cardinality_izl = Cardinality::test_default(&mut store);
/// let understood_amount = "snotty_canvas".to_owned();
/// let colossal_deer = "wistful_cactus".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_vpb, &object_xpr, &cardinality_izl, understood_amount, colossal_deer);
///
/// let object_ixa = sarzak_get_one_obj_across_r17!(referrer, store);
/// assert_eq!(&object_xpr, object_ixa);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r17-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r17 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r17;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r17-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R17(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Referrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_maybe_get_many_r_froms_across_r17;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_aeq = Conditionality::test_default(&mut store);
/// let marvelous_play = "paltry_parent".to_owned();
/// let temporary_bait = "apathetic_example".to_owned();
/// let needless_comparison = "whole_cover".to_owned();
/// let object_qdz = Object::new(&mut store, marvelous_play, temporary_bait, needless_comparison);
/// let cardinality_bgx = Cardinality::test_default(&mut store);
/// let shut_watch = "concerned_stretch".to_owned();
/// let majestic_club = "pale_needle".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_aeq, &object_qdz, &cardinality_bgx, shut_watch, majestic_club);
/// let referrer_pgb = sarzak_maybe_get_many_r_froms_across_r17!(object_qdz, store);
///
/// assert!(referrer_pgb.iter().find(|&x| **x == referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_froms_across_r17-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_froms_across_r17 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referrer()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Referrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_froms_across_r17;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_froms_across_r17-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Cardinality`][ðŸ¦ž], via _R8_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Cardinality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Cardinality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_get_one_card_across_r8;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_iqd = Conditionality::test_default(&mut store);
/// let busy_glue = "level_oatmeal".to_owned();
/// let beautiful_roll = "known_home".to_owned();
/// let upbeat_cushion = "graceful_weight".to_owned();
/// let object_ufr = Object::new(&mut store, busy_glue, beautiful_roll, upbeat_cushion);
/// let cardinality_tcv = Cardinality::test_default(&mut store);
/// let ritzy_ocean = "stingy_dress".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_iqd, &object_ufr, &cardinality_tcv, ritzy_ocean);
///
/// let cardinality_hxv = sarzak_get_one_card_across_r8!(referent, store);
/// assert_eq!(&cardinality_tcv, cardinality_hxv);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_card_across_r8-emit_binary_main"}}}
macro_rules! sarzak_get_one_card_across_r8 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_cardinality(&$input.cardinality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_card_across_r8;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_card_across_r8-emit_binary_main"}}}

/// Macro to traverse [`Cardinality`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R8(c)_
///
/// This macro expects a &[`Cardinality`][ðŸ¦€], and returns an Option<&[`Referent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Cardinality
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_maybe_get_many_r_tos_across_r8;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_xgm = Conditionality::test_default(&mut store);
/// let lucky_elbow = "frantic_babies".to_owned();
/// let zippy_jar = "macabre_rifle".to_owned();
/// let standing_sheep = "hard_cord".to_owned();
/// let object_wwp = Object::new(&mut store, lucky_elbow, zippy_jar, standing_sheep);
/// let cardinality_lkd = Cardinality::test_default(&mut store);
/// let dashing_fairies = "violet_rabbit".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_xgm, &object_wwp, &cardinality_lkd, dashing_fairies);
/// let referent_owb = sarzak_maybe_get_many_r_tos_across_r8!(cardinality_lkd, store);
///
/// assert!(referent_owb.iter().find(|&x| **x == referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_tos_across_r8-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_tos_across_r8 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referent()
            .filter_map(|z| if z.1.cardinality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_tos_across_r8;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_tos_across_r8-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R16_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_get_one_obj_across_r16;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ogv = Conditionality::test_default(&mut store);
/// let accurate_head = "halting_coach".to_owned();
/// let alluring_pen = "thankful_idea".to_owned();
/// let skillful_burst = "glistening_planes".to_owned();
/// let object_jmy = Object::new(&mut store, accurate_head, alluring_pen, skillful_burst);
/// let cardinality_anr = Cardinality::test_default(&mut store);
/// let scary_lace = "voracious_rule".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_ogv, &object_jmy, &cardinality_anr, scary_lace);
///
/// let object_irn = sarzak_get_one_obj_across_r16!(referent, store);
/// assert_eq!(&object_jmy, object_irn);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r16-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r16 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r16;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r16-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R16(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Referent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_maybe_get_many_r_tos_across_r16;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ajs = Conditionality::test_default(&mut store);
/// let sassy_fire = "absorbed_profit".to_owned();
/// let tangy_committee = "long_term_zinc".to_owned();
/// let last_twist = "voiceless_birthday".to_owned();
/// let object_cuj = Object::new(&mut store, sassy_fire, tangy_committee, last_twist);
/// let cardinality_uzq = Cardinality::test_default(&mut store);
/// let dispensable_kitten = "aboriginal_butter".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_ajs, &object_cuj, &cardinality_uzq, dispensable_kitten);
/// let referent_gad = sarzak_maybe_get_many_r_tos_across_r16!(object_cuj, store);
///
/// assert!(referent_gad.iter().find(|&x| **x == referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_tos_across_r16-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_tos_across_r16 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referent()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Referent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_tos_across_r16;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_tos_across_r16-emit_binary_main"}}}

/// Macro to traverse [`Reference`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R27_
///
/// This macro expects a &[`Reference`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Reference
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Reference;
/// # use sarzak::sarzak_get_one_obj_across_r27;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let kindhearted_stone = "tall_scarf".to_owned();
/// let handsomely_sisters = "exotic_smash".to_owned();
/// let inexpensive_tank = "puzzling_chickens".to_owned();
/// let object_dzc = Object::new(&mut store, kindhearted_stone, handsomely_sisters, inexpensive_tank);
///
/// let reference = Reference::new(&mut store, &object_dzc);
///
/// let object_tug = sarzak_get_one_obj_across_r27!(reference, store);
/// assert_eq!(&object_dzc, object_tug);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r27-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r27 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.object).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r27;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r27-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Reference`][ðŸ¦ž], via _R27(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Reference`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Reference
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Reference;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_one_t_ref_across_r27;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let dazzling_trees = "reminiscent_grape".to_owned();
/// let bumpy_carpenter = "unsuitable_show".to_owned();
/// let ultra_comparison = "special_existence".to_owned();
/// let object_nun = Object::new(&mut store, dazzling_trees, bumpy_carpenter, ultra_comparison);
///
/// let reference = Reference::new(&mut store, &object_nun);
/// let reference_tep = sarzak_maybe_get_one_t_ref_across_r27!(object_nun, store);
///
/// assert_eq!(Some(&reference), reference_tep);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_one_t_ref_across_r27-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_one_t_ref_across_r27 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-reference-emit_one_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_conditional_lookup
        $store
            .iter_reference()
            .find(|z| z.1.object == $input.id)
            .map(|(_, z)| z)
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-reference-emit_one_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_one_t_ref_across_r27;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_one_t_ref_across_r27-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Conditionality`][ðŸ¦ž], via _R12_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Conditionality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Conditionality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_get_one_cond_across_r12;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_uol = Conditionality::test_default(&mut store);
/// let pushy_caption = "plant_match".to_owned();
/// let many_watch = "second_snail".to_owned();
/// let rigid_honey = "picayune_wing".to_owned();
/// let object_gpt = Object::new(&mut store, pushy_caption, many_watch, rigid_honey);
/// let cardinality_uez = Cardinality::test_default(&mut store);
/// let far_stranger = "massive_friend".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_uol, &object_gpt, &cardinality_uez, far_stranger);
///
/// let conditionality_fqw = sarzak_get_one_cond_across_r12!(referent, store);
/// assert_eq!(&conditionality_uol, conditionality_fqw);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_cond_across_r12-emit_binary_main"}}}
macro_rules! sarzak_get_one_cond_across_r12 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_conditionality(&$input.conditionality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_cond_across_r12;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_cond_across_r12-emit_binary_main"}}}

/// Macro to traverse [`Conditionality`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R12(c)_
///
/// This macro expects a &[`Conditionality`][ðŸ¦€], and returns an Option<&[`Referent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Conditionality
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_r_tos_across_r12;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_abl = Conditionality::test_default(&mut store);
/// let four_cream = "same_reward".to_owned();
/// let woebegone_drawer = "disgusted_sponge".to_owned();
/// let lame_scale = "narrow_soap".to_owned();
/// let object_rks = Object::new(&mut store, four_cream, woebegone_drawer, lame_scale);
/// let cardinality_cbb = Cardinality::test_default(&mut store);
/// let deep_pencil = "needy_art".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_abl, &object_rks, &cardinality_cbb, deep_pencil);
/// let referent_vlx = sarzak_maybe_get_many_r_tos_across_r12!(conditionality_abl, store);
///
/// assert!(referent_vlx.iter().find(|&x| **x == referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_tos_across_r12-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_tos_across_r12 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referent()
            .filter_map(|z| if z.1.conditionality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_tos_across_r12;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_tos_across_r12-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferrer`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R26_
///
/// This macro expects a &[`AssociativeReferrer`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferrer
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak_get_one_obj_across_r26;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let unbiased_orange = "ludicrous_cake".to_owned();
/// let flashy_change = "dapper_gold".to_owned();
/// let maniacal_minister = "envious_disgust".to_owned();
/// let object_vcc = Object::new(&mut store, unbiased_orange, flashy_change, maniacal_minister);
///
/// let associative_referrer = AssociativeReferrer::new(&mut store, &object_vcc);
///
/// let object_oyd = sarzak_get_one_obj_across_r26!(associative_referrer, store);
/// assert_eq!(&object_vcc, object_oyd);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r26-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r26 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r26;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r26-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`AssociativeReferrer`][ðŸ¦ž], via _R26(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`AssociativeReferrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_ass_froms_across_r26;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let lewd_jam = "obtainable_achiever".to_owned();
/// let imminent_stomach = "black_finger".to_owned();
/// let ubiquitous_copy = "yellow_mice".to_owned();
/// let object_oog = Object::new(&mut store, lewd_jam, imminent_stomach, ubiquitous_copy);
///
/// let associative_referrer = AssociativeReferrer::new(&mut store, &object_oog);
/// let associative_referrer_lkk = sarzak_maybe_get_many_ass_froms_across_r26!(object_oog, store);
///
/// assert!(associative_referrer_lkk.iter().find(|&x| **x == associative_referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ass_froms_across_r26-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ass_froms_across_r26 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-associative_referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_associative_referrer()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&AssociativeReferrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-associative_referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ass_froms_across_r26;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ass_froms_across_r26-emit_binary_main"}}}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Conditionality`][ðŸ¦ž], via _R11_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Conditionality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Conditionality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_get_one_cond_across_r11;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_hxe = Conditionality::test_default(&mut store);
/// let handsome_gun = "awesome_authority".to_owned();
/// let ajar_picture = "inconclusive_snow".to_owned();
/// let clumsy_toes = "unruly_knife".to_owned();
/// let object_irx = Object::new(&mut store, handsome_gun, ajar_picture, clumsy_toes);
/// let cardinality_tqt = Cardinality::test_default(&mut store);
/// let amazing_afternoon = "limping_ducks".to_owned();
/// let salty_riddle = "chubby_bomb".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_hxe, &object_irx, &cardinality_tqt, amazing_afternoon, salty_riddle);
///
/// let conditionality_peh = sarzak_get_one_cond_across_r11!(referrer, store);
/// assert_eq!(&conditionality_hxe, conditionality_peh);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_cond_across_r11-emit_binary_main"}}}
macro_rules! sarzak_get_one_cond_across_r11 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_conditionality(&$input.conditionality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_cond_across_r11;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_cond_across_r11-emit_binary_main"}}}

/// Macro to traverse [`Conditionality`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R11(c)_
///
/// This macro expects a &[`Conditionality`][ðŸ¦€], and returns an Option<&[`Referrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Conditionality
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_r_froms_across_r11;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_mct = Conditionality::test_default(&mut store);
/// let guarded_title = "hypnotic_oil".to_owned();
/// let holistic_knee = "spectacular_metal".to_owned();
/// let roasted_cushion = "outstanding_throne".to_owned();
/// let object_dxk = Object::new(&mut store, guarded_title, holistic_knee, roasted_cushion);
/// let cardinality_wip = Cardinality::test_default(&mut store);
/// let aloof_aunt = "aggressive_brain".to_owned();
/// let labored_ghost = "swift_quince".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_mct, &object_dxk, &cardinality_wip, aloof_aunt, labored_ghost);
/// let referrer_ven = sarzak_maybe_get_many_r_froms_across_r11!(conditionality_mct, store);
///
/// assert!(referrer_ven.iter().find(|&x| **x == referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_froms_across_r11-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_froms_across_r11 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referrer()
            .filter_map(|z| if z.1.conditionality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_froms_across_r11;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_froms_across_r11-emit_binary_main"}}}

/// Macro to traverse [`Subtype`][ðŸ¦€] âž¡ [`Isa`][ðŸ¦ž], via _R27_
///
/// This macro expects a &[`Subtype`][ðŸ¦€], and returns a &[`Isa`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Subtype
/// [ðŸ¦ž]: crate::sarzak::types::Isa
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_r_isa_across_r27;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let squeamish_spring = "whole_floor".to_owned();
/// let adjoining_sidewalk = "delirious_cook".to_owned();
/// let important_songs = "aggressive_crown".to_owned();
/// let object_vud = Object::new(&mut store, squeamish_spring, adjoining_sidewalk, important_songs);
/// let supertype_qsz = Supertype::new(&mut store, &object_vud);
/// let isa_iey = Isa::new(&mut store, &supertype_qsz, 42);
/// let macabre_apples = "precious_park".to_owned();
/// let wry_sun = "mushy_earthquake".to_owned();
/// let quiet_degree = "wrathful_sweater".to_owned();
/// let object_rlq = Object::new(&mut store, macabre_apples, wry_sun, quiet_degree);
///
/// let subtype = Subtype::new(&mut store, &isa_iey, &object_rlq);
///
/// let isa_sax = sarzak_get_one_r_isa_across_r27!(subtype, store);
/// assert_eq!(&isa_iey, isa_sax);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_isa_across_r27-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_isa_across_r27 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"isa-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_isa(&$input.isa).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"isa-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_isa_across_r27;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_isa_across_r27-emit_binary_main"}}}

/// Macro to traverse [`Isa`][ðŸ¦€] âž¡ [`Subtype`][ðŸ¦ž], via _R27_
///
/// This macro expects a &[`Isa`][ðŸ¦€], and returns a &[`Subtype`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Isa
/// [ðŸ¦ž]: crate::sarzak::types::Subtype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak_get_many_r_subs_across_r27;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let tall_camera = "numerous_acoustics".to_owned();
/// let illegal_grade = "sordid_distribution".to_owned();
/// let godly_things = "relieved_chance".to_owned();
/// let object_vyj = Object::new(&mut store, tall_camera, illegal_grade, godly_things);
/// let supertype_opi = Supertype::new(&mut store, &object_vyj);
/// let isa_wlw = Isa::new(&mut store, &supertype_opi, 42);
/// let uninterested_form = "mushy_spot".to_owned();
/// let materialistic_canvas = "teeny_mailbox".to_owned();
/// let far_marble = "abandoned_aunt".to_owned();
/// let object_azp = Object::new(&mut store, uninterested_form, materialistic_canvas, far_marble);
///
/// let subtype = Subtype::new(&mut store, &isa_wlw, &object_azp);
/// let subtype_ltq = sarzak_get_many_r_subs_across_r27!(isa_wlw, store);
///
/// assert!(subtype_ltq.iter().find(|&x| **x == subtype).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_r_subs_across_r27-emit_binary_main"}}}
macro_rules! sarzak_get_many_r_subs_across_r27 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"isa-subtype-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_subtype()
            .filter_map(|z| if z.1.isa == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Subtype>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"isa-subtype-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_get_many_r_subs_across_r27;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_r_subs_across_r27-emit_binary_main"}}}

/// Macro to traverse [`Isa`][ðŸ¦€] âž¡ [`Supertype`][ðŸ¦ž], via _R13_
///
/// This macro expects a &[`Isa`][ðŸ¦€], and returns a &[`Supertype`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Isa
/// [ðŸ¦ž]: crate::sarzak::types::Supertype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_r_sup_across_r13;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let parched_division = "enchanted_voyage".to_owned();
/// let overt_crown = "irritating_patch".to_owned();
/// let lonely_cave = "two_hobbies".to_owned();
/// let object_bvw = Object::new(&mut store, parched_division, overt_crown, lonely_cave);
/// let supertype_rff = Supertype::new(&mut store, &object_bvw);
///
/// let isa = Isa::new(&mut store, &supertype_rff, 42);
///
/// let supertype_tnh = sarzak_get_one_r_sup_across_r13!(isa, store);
/// assert_eq!(&supertype_rff, supertype_tnh);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_sup_across_r13-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_sup_across_r13 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"supertype-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_supertype(&$input.supertype).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"supertype-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_sup_across_r13;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_sup_across_r13-emit_binary_main"}}}

/// Macro to traverse [`Supertype`][ðŸ¦€] âž¡ [`Isa`][ðŸ¦ž], via _R13_
///
/// This macro expects a &[`Supertype`][ðŸ¦€], and returns a &[`Isa`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Supertype
/// [ðŸ¦ž]: crate::sarzak::types::Isa
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak_get_one_r_isa_across_r13;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let smooth_clam = "tenuous_wave".to_owned();
/// let ashamed_cabbage = "abashed_slip".to_owned();
/// let possessive_square = "whispering_shoe".to_owned();
/// let object_fid = Object::new(&mut store, smooth_clam, ashamed_cabbage, possessive_square);
/// let supertype_vhb = Supertype::new(&mut store, &object_fid);
///
/// let isa = Isa::new(&mut store, &supertype_vhb, 42);
/// let isa_all = sarzak_get_one_r_isa_across_r13!(supertype_vhb, store);
///
/// assert_eq!(&isa, isa_all);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_isa_across_r13-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_isa_across_r13 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"supertype-isa-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_isa()
            .find(|z| z.1.supertype == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"supertype-isa-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_isa_across_r13;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_isa_across_r13-emit_binary_main"}}}

/// Macro to traverse [`State`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R18_
///
/// This macro expects a &[`State`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::State
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak_get_one_obj_across_r18;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conscious_fall = "awful_smash".to_owned();
/// let decorous_cough = "dispensable_harbor".to_owned();
/// let dull_party = "mundane_marble".to_owned();
/// let object_bhx = Object::new(&mut store, conscious_fall, decorous_cough, dull_party);
/// let alive_horse = "tawdry_lunchroom".to_owned();
///
/// let state = State::new(&mut store, &object_bhx, alive_horse);
///
/// let object_gyr = sarzak_get_one_obj_across_r18!(state, store);
/// assert_eq!(&object_bhx, object_gyr);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r18-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r18 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r18;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r18-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`State`][ðŸ¦ž], via _R18(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`State`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::State
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak_maybe_get_many_ss_across_r18;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let far_flung_boot = "nostalgic_pull".to_owned();
/// let knowing_breakfast = "purple_gold".to_owned();
/// let berserk_fang = "obsolete_pen".to_owned();
/// let object_xet = Object::new(&mut store, far_flung_boot, knowing_breakfast, berserk_fang);
/// let high_pitched_glass = "near_system".to_owned();
///
/// let state = State::new(&mut store, &object_xet, high_pitched_glass);
/// let state_ecq = sarzak_maybe_get_many_ss_across_r18!(object_xet, store);
///
/// assert!(state_ecq.iter().find(|&x| **x == state).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ss_across_r18-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ss_across_r18 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-state-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_state()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&State>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-state-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ss_across_r18;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ss_across_r18-emit_binary_main"}}}

/// Macro to traverse [`State`][ðŸ¦€] âž¡ [`Event`][ðŸ¦ž], across [`AcknowledgedEvent`][ðŸ¦‘] via _R20_
///
/// This macro expects a &[`State`][ðŸ¦€], and returns a &[`Event`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_associative_macros`
///
/// [ðŸ¦€]: crate::sarzak::types::State
/// [ðŸ¦ž]: crate::sarzak::types::Event
/// [ðŸ¦‘]: crate::sarzak::types::AcknowledgedEvent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak::AcknowledgedEvent;
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak_get_many_e_across_r20;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let handsome_beginner = "alluring_rabbits".to_owned();
/// let massive_body = "actually_frog".to_owned();
/// let toothsome_lead = "assorted_balloon".to_owned();
/// let object_nno = Object::new(&mut store, handsome_beginner, massive_body, toothsome_lead);
/// let courageous_touch = "horrible_smell".to_owned();
/// let state_gyn = State::new(&mut store, &object_nno, courageous_touch);
/// let incompetent_sort = "far_bell".to_owned();
/// let accessible_sweater = "quick_box".to_owned();
/// let greedy_able = "abashed_route".to_owned();
/// let object_ihs = Object::new(&mut store, incompetent_sort, accessible_sweater, greedy_able);
/// let alluring_snails = "wary_afternoon".to_owned();
/// let event_rwy = Event::new(&mut store, &object_ihs, alluring_snails);
/// let acknowledged_event = AcknowledgedEvent::new(&mut store, &state_gyn, &event_rwy);
///
/// let event_tkm = sarzak_get_many_e_across_r20!(state_gyn, store);
/// assert!(event_tkm.iter().find(|&x| **x == event_rwy).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_e_across_r20-emit_associative_main"}}}
macro_rules! sarzak_get_many_e_across_r20 {
    ($input:expr, $store:expr) => {{
        // nut::codegen::template::macros::emit_assoc_many
        $store
            .iter_acknowledged_event()
            .filter(|a| a.1.state_id == $input.id)
            .map(|a| $store.exhume_event(&a.1.event_id).unwrap())
            .collect::<Vec<&Event>>()
    }};
}
pub use sarzak_get_many_e_across_r20;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_e_across_r20-emit_associative_main"}}}

/// Macro to traverse [`Event`][ðŸ¦€] âž¡ [`State`][ðŸ¦ž], across [`AcknowledgedEvent`][ðŸ¦‘] via _R20_
///
/// This macro expects a &[`Event`][ðŸ¦€], and returns a &[`State`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_associative_macros`
///
/// [ðŸ¦€]: crate::sarzak::types::Event
/// [ðŸ¦ž]: crate::sarzak::types::State
/// [ðŸ¦‘]: crate::sarzak::types::AcknowledgedEvent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak::AcknowledgedEvent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_many_s_across_r20;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let sticky_paint = "stale_gun".to_owned();
/// let clean_push = "elegant_curtain".to_owned();
/// let jazzy_boy = "far_flung_agreement".to_owned();
/// let object_eyz = Object::new(&mut store, sticky_paint, clean_push, jazzy_boy);
/// let noisy_yoke = "fancy_experience".to_owned();
/// let state_odk = State::new(&mut store, &object_eyz, noisy_yoke);
/// let scared_deer = "defeated_circle".to_owned();
/// let capricious_cow = "disgusted_condition".to_owned();
/// let lamentable_smell = "oceanic_cub".to_owned();
/// let object_djf = Object::new(&mut store, scared_deer, capricious_cow, lamentable_smell);
/// let excited_poison = "omniscient_ants".to_owned();
/// let event_fwa = Event::new(&mut store, &object_djf, excited_poison);
/// let acknowledged_event = AcknowledgedEvent::new(&mut store, &state_odk, &event_fwa);
///
/// let state_onj = sarzak_get_many_s_across_r20!(event_fwa, store);
/// assert!(state_onj.iter().find(|&x| **x == state_odk).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_s_across_r20-emit_associative_main"}}}
macro_rules! sarzak_get_many_s_across_r20 {
    ($input:expr, $store:expr) => {{
        // nut::codegen::template::macros::emit_assoc_many
        $store
            .iter_acknowledged_event()
            .filter(|a| a.1.event_id == $input.id)
            .map(|a| $store.exhume_state(&a.1.state_id).unwrap())
            .collect::<Vec<&State>>()
    }};
}
pub use sarzak_get_many_s_across_r20;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_s_across_r20-emit_associative_main"}}}

/// Macro to traverse [`Associative`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R22_
///
/// This macro expects a &[`Associative`][ðŸ¦€], and returns a &[`AssociativeReferent`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Associative
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak_get_one_ass_to_across_r22;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let crooked_sock = "penitent_bike".to_owned();
/// let woebegone_star = "gamy_care".to_owned();
/// let beautiful_trousers = "tall_apparel".to_owned();
/// let object_wrp = Object::new(&mut store, crooked_sock, woebegone_star, beautiful_trousers);
/// let associative_referent_zri = AssociativeReferent::new(&mut store, &object_wrp);
/// let bent_guide = "icky_talk".to_owned();
/// let outstanding_family = "rapid_coach".to_owned();
/// let plastic_bread = "useful_map".to_owned();
/// let object_sxm = Object::new(&mut store, bent_guide, outstanding_family, plastic_bread);
/// let associative_referent_pwe = AssociativeReferent::new(&mut store, &object_sxm);
/// let burly_birthday = "stale_sheet".to_owned();
/// let subdued_card = "puffy_girls".to_owned();
/// let aromatic_grape = "tested_credit".to_owned();
/// let object_kqn = Object::new(&mut store, burly_birthday, subdued_card, aromatic_grape);
/// let associative_referrer_djp = AssociativeReferrer::new(&mut store, &object_kqn);
///
/// let associative = Associative::new(&mut store, &associative_referent_zri, &associative_referent_pwe, &associative_referrer_djp, 42);
///
/// let associative_referent_yaf = sarzak_get_one_ass_to_across_r22!(associative, store);
/// assert_eq!(&associative_referent_pwe, associative_referent_yaf);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_ass_to_across_r22-emit_binary_main"}}}
macro_rules! sarzak_get_one_ass_to_across_r22 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_associative_referent(&$input.other).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_ass_to_across_r22;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_ass_to_across_r22-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Associative`][ðŸ¦ž], via _R22_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Associative`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Associative
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_r_assoc_across_r22;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let weary_hospital = "therapeutic_women".to_owned();
/// let full_monkey = "fine_hobbies".to_owned();
/// let gifted_income = "black_and_white_frame".to_owned();
/// let object_wqm = Object::new(&mut store, weary_hospital, full_monkey, gifted_income);
/// let associative_referent_mer = AssociativeReferent::new(&mut store, &object_wqm);
/// let gentle_button = "funny_distance".to_owned();
/// let disgusted_flight = "zonked_flame".to_owned();
/// let third_writer = "intelligent_use".to_owned();
/// let object_kkw = Object::new(&mut store, gentle_button, disgusted_flight, third_writer);
/// let associative_referent_ozx = AssociativeReferent::new(&mut store, &object_kkw);
/// let physical_leather = "serious_route".to_owned();
/// let bite_sized_mint = "dark_argument".to_owned();
/// let spotty_destruction = "glib_giants".to_owned();
/// let object_ppx = Object::new(&mut store, physical_leather, bite_sized_mint, spotty_destruction);
/// let associative_referrer_qeu = AssociativeReferrer::new(&mut store, &object_ppx);
///
/// let associative = Associative::new(&mut store, &associative_referent_mer, &associative_referent_ozx, &associative_referrer_qeu, 42);
/// let associative_wox = sarzak_get_one_r_assoc_across_r22!(associative_referent_ozx, store);
///
/// assert_eq!(&associative, associative_wox);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_assoc_across_r22-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_assoc_across_r22 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_associative()
            .find(|z| z.1.other == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_assoc_across_r22;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_assoc_across_r22-emit_binary_main"}}}

/// Macro to traverse [`Supertype`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R14_
///
/// This macro expects a &[`Supertype`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Supertype
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak_get_one_obj_across_r14;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let green_canvas = "itchy_crook".to_owned();
/// let medical_lip = "adventurous_birds".to_owned();
/// let wiggly_stranger = "fragile_mother".to_owned();
/// let object_rvr = Object::new(&mut store, green_canvas, medical_lip, wiggly_stranger);
///
/// let supertype = Supertype::new(&mut store, &object_rvr);
///
/// let object_hzk = sarzak_get_one_obj_across_r14!(supertype, store);
/// assert_eq!(&object_rvr, object_hzk);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r14-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r14 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r14;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r14-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Supertype`][ðŸ¦ž], via _R14(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Supertype`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Supertype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak_maybe_get_many_r_sups_across_r14;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let grouchy_spy = "heavenly_pipe".to_owned();
/// let flawless_light = "exciting_minute".to_owned();
/// let unarmed_play = "endurable_judge".to_owned();
/// let object_typ = Object::new(&mut store, grouchy_spy, flawless_light, unarmed_play);
///
/// let supertype = Supertype::new(&mut store, &object_typ);
/// let supertype_shf = sarzak_maybe_get_many_r_sups_across_r14!(object_typ, store);
///
/// assert!(supertype_shf.iter().find(|&x| **x == supertype).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_sups_across_r14-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_sups_across_r14 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-supertype-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_supertype()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Supertype>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-supertype-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_sups_across_r14;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_sups_across_r14-emit_binary_main"}}}

/// Macro to traverse [`Associative`][ðŸ¦€] âž¡ [`AssociativeReferrer`][ðŸ¦ž], via _R21_
///
/// This macro expects a &[`Associative`][ðŸ¦€], and returns a &[`AssociativeReferrer`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Associative
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak_get_one_ass_from_across_r21;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let belligerent_apple = "aloof_brake".to_owned();
/// let dusty_owner = "flimsy_pin".to_owned();
/// let milky_spring = "auspicious_vegetable".to_owned();
/// let object_ptq = Object::new(&mut store, belligerent_apple, dusty_owner, milky_spring);
/// let associative_referent_qxb = AssociativeReferent::new(&mut store, &object_ptq);
/// let hypnotic_air = "awesome_land".to_owned();
/// let hungry_face = "thankful_railway".to_owned();
/// let nappy_selection = "yielding_recess".to_owned();
/// let object_jki = Object::new(&mut store, hypnotic_air, hungry_face, nappy_selection);
/// let associative_referent_dct = AssociativeReferent::new(&mut store, &object_jki);
/// let silent_tax = "dysfunctional_knot".to_owned();
/// let puny_taste = "astonishing_organization".to_owned();
/// let absorbed_library = "terrific_achieve".to_owned();
/// let object_xnr = Object::new(&mut store, silent_tax, puny_taste, absorbed_library);
/// let associative_referrer_ncv = AssociativeReferrer::new(&mut store, &object_xnr);
///
/// let associative = Associative::new(&mut store, &associative_referent_qxb, &associative_referent_dct, &associative_referrer_ncv, 42);
///
/// let associative_referrer_tjq = sarzak_get_one_ass_from_across_r21!(associative, store);
/// assert_eq!(&associative_referrer_ncv, associative_referrer_tjq);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_ass_from_across_r21-emit_binary_main"}}}
macro_rules! sarzak_get_one_ass_from_across_r21 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referrer-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_associative_referrer(&$input.from).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referrer-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_ass_from_across_r21;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_ass_from_across_r21-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferrer`][ðŸ¦€] âž¡ [`Associative`][ðŸ¦ž], via _R21_
///
/// This macro expects a &[`AssociativeReferrer`][ðŸ¦€], and returns a &[`Associative`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferrer
/// [ðŸ¦ž]: crate::sarzak::types::Associative
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak_get_one_r_assoc_across_r21;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let brown_men = "rebel_trade".to_owned();
/// let aquatic_letter = "subdued_prison".to_owned();
/// let youthful_lawyer = "telling_ladybug".to_owned();
/// let object_usm = Object::new(&mut store, brown_men, aquatic_letter, youthful_lawyer);
/// let associative_referent_dko = AssociativeReferent::new(&mut store, &object_usm);
/// let uppity_tiger = "majestic_quiver".to_owned();
/// let pretty_country = "lush_fight".to_owned();
/// let internal_pies = "aback_cracker".to_owned();
/// let object_bvp = Object::new(&mut store, uppity_tiger, pretty_country, internal_pies);
/// let associative_referent_gst = AssociativeReferent::new(&mut store, &object_bvp);
/// let debonair_detail = "woebegone_heart".to_owned();
/// let lazy_egg = "animated_eggnog".to_owned();
/// let tenuous_bone = "smoggy_hydrant".to_owned();
/// let object_wso = Object::new(&mut store, debonair_detail, lazy_egg, tenuous_bone);
/// let associative_referrer_dma = AssociativeReferrer::new(&mut store, &object_wso);
///
/// let associative = Associative::new(&mut store, &associative_referent_dko, &associative_referent_gst, &associative_referrer_dma, 42);
/// let associative_bko = sarzak_get_one_r_assoc_across_r21!(associative_referrer_dma, store);
///
/// assert_eq!(&associative, associative_bko);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_assoc_across_r21-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_assoc_across_r21 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referrer-associative-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_associative()
            .find(|z| z.1.from == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referrer-associative-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_assoc_across_r21;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_assoc_across_r21-emit_binary_main"}}}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Cardinality`][ðŸ¦ž], via _R9_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Cardinality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Cardinality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_get_one_card_across_r9;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_oxv = Conditionality::test_default(&mut store);
/// let teeny_stretch = "obese_cable".to_owned();
/// let hard_control = "detailed_comb".to_owned();
/// let abiding_judge = "female_clock".to_owned();
/// let object_qmh = Object::new(&mut store, teeny_stretch, hard_control, abiding_judge);
/// let cardinality_njy = Cardinality::test_default(&mut store);
/// let hesitant_meal = "cautious_quilt".to_owned();
/// let tacit_story = "weak_sleet".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_oxv, &object_qmh, &cardinality_njy, hesitant_meal, tacit_story);
///
/// let cardinality_drl = sarzak_get_one_card_across_r9!(referrer, store);
/// assert_eq!(&cardinality_njy, cardinality_drl);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_card_across_r9-emit_binary_main"}}}
macro_rules! sarzak_get_one_card_across_r9 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_cardinality(&$input.cardinality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_card_across_r9;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_card_across_r9-emit_binary_main"}}}

/// Macro to traverse [`Cardinality`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R9(c)_
///
/// This macro expects a &[`Cardinality`][ðŸ¦€], and returns an Option<&[`Referrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Cardinality
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_maybe_get_many_r_froms_across_r9;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_jlg = Conditionality::test_default(&mut store);
/// let adamant_voyage = "truculent_stove".to_owned();
/// let sulky_pets = "shaggy_airplane".to_owned();
/// let long_term_cork = "frightened_back".to_owned();
/// let object_lln = Object::new(&mut store, adamant_voyage, sulky_pets, long_term_cork);
/// let cardinality_yah = Cardinality::test_default(&mut store);
/// let quickest_amusement = "right_lamp".to_owned();
/// let moldy_tin = "coordinated_death".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_jlg, &object_lln, &cardinality_yah, quickest_amusement, moldy_tin);
/// let referrer_oiv = sarzak_maybe_get_many_r_froms_across_r9!(cardinality_yah, store);
///
/// assert!(referrer_oiv.iter().find(|&x| **x == referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_froms_across_r9-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_froms_across_r9 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referrer()
            .filter_map(|z| if z.1.cardinality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_froms_across_r9;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_froms_across_r9-emit_binary_main"}}}

/// Macro to traverse [`Attribute`][ðŸ¦€] âž¡ [`Type`][ðŸ¦ž], via _R2_
///
/// This macro expects a &[`Attribute`][ðŸ¦€], and returns a &[`Type`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Attribute
/// [ðŸ¦ž]: crate::sarzak::types::Type
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak_get_one_t_across_r2;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let tight_adjustment = "faint_insurance".to_owned();
/// let uppity_nose = "righteous_ink".to_owned();
/// let adamant_stream = "halting_use".to_owned();
/// let object = Object::new(&mut store, tight_adjustment, uppity_nose, adamant_stream);
/// let type_xez = Type::test_default(&mut store);
/// let voiceless_earthquake = "verdant_beetle".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_xez, voiceless_earthquake);
///
/// let type_obx = sarzak_get_one_t_across_r2!(attribute, store);
/// assert_eq!(&type_xez, type_obx);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_t_across_r2-emit_binary_main"}}}
macro_rules! sarzak_get_one_t_across_r2 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"ty-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_ty(&$input.ty).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"ty-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_t_across_r2;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_t_across_r2-emit_binary_main"}}}

/// Macro to traverse [`Type`][ðŸ¦€] âž¡ [`Attribute`][ðŸ¦ž], via _R2_
///
/// This macro expects a &[`Type`][ðŸ¦€], and returns a &[`Attribute`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Type
/// [ðŸ¦ž]: crate::sarzak::types::Attribute
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_a_across_r2;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let perfect_sheep = "defective_attention".to_owned();
/// let wiry_canvas = "zesty_shade".to_owned();
/// let childlike_support = "conscious_discovery".to_owned();
/// let object = Object::new(&mut store, perfect_sheep, wiry_canvas, childlike_support);
/// let type_mqe = Type::test_default(&mut store);
/// let flashy_coal = "subdued_mark".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_mqe, flashy_coal);
/// let attribute_mbz = sarzak_get_one_a_across_r2!(type_mqe, store);
///
/// assert_eq!(&attribute, attribute_mbz);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_a_across_r2-emit_binary_main"}}}
macro_rules! sarzak_get_one_a_across_r2 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"ty-attribute-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_attribute()
            .find(|z| z.1.ty == $input.get_id())
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"ty-attribute-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_a_across_r2;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_a_across_r2-emit_binary_main"}}}

/// Macro to traverse [`Binary`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R6_
///
/// This macro expects a &[`Binary`][ðŸ¦€], and returns a &[`Referrer`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Binary
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_get_one_r_from_across_r6;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_nre = Conditionality::test_default(&mut store);
/// let pumped_curve = "hilarious_rub".to_owned();
/// let tan_operation = "aback_rifle".to_owned();
/// let electric_cars = "ceaseless_lip".to_owned();
/// let object_tik = Object::new(&mut store, pumped_curve, tan_operation, electric_cars);
/// let cardinality_hel = Cardinality::test_default(&mut store);
/// let wakeful_trousers = "overt_bear".to_owned();
/// let referent_lko = Referent::new(&mut store, &conditionality_nre, &object_tik, &cardinality_hel, wakeful_trousers);
/// let conditionality_jdo = Conditionality::test_default(&mut store);
/// let right_night = "tall_attack".to_owned();
/// let stiff_beast = "opposite_lock".to_owned();
/// let far_flung_meal = "incandescent_story".to_owned();
/// let object_fnc = Object::new(&mut store, right_night, stiff_beast, far_flung_meal);
/// let cardinality_ots = Cardinality::test_default(&mut store);
/// let verdant_chain = "curious_instrument".to_owned();
/// let subsequent_jellyfish = "habitual_week".to_owned();
/// let referrer_fbs = Referrer::new(&mut store, &conditionality_jdo, &object_fnc, &cardinality_ots, verdant_chain, subsequent_jellyfish);
///
/// let binary = Binary::new(&mut store, &referent_lko, &referrer_fbs, 42);
///
/// let referrer_ken = sarzak_get_one_r_from_across_r6!(binary, store);
/// assert_eq!(&referrer_fbs, referrer_ken);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_from_across_r6-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_from_across_r6 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referrer-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_referrer(&$input.from).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referrer-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_from_across_r6;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_from_across_r6-emit_binary_main"}}}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Binary`][ðŸ¦ž], via _R6_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Binary`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Binary
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak_get_one_r_bin_across_r6;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_qut = Conditionality::test_default(&mut store);
/// let inexpensive_join = "womanly_shock".to_owned();
/// let boorish_line = "quick_bite".to_owned();
/// let awake_fear = "cheap_milk".to_owned();
/// let object_ile = Object::new(&mut store, inexpensive_join, boorish_line, awake_fear);
/// let cardinality_fuj = Cardinality::test_default(&mut store);
/// let defiant_pump = "bewildered_voice".to_owned();
/// let referent_iva = Referent::new(&mut store, &conditionality_qut, &object_ile, &cardinality_fuj, defiant_pump);
/// let conditionality_pgx = Conditionality::test_default(&mut store);
/// let future_skin = "motionless_light".to_owned();
/// let intelligent_cheese = "impossible_dolls".to_owned();
/// let hypnotic_beginner = "painstaking_cup".to_owned();
/// let object_ejh = Object::new(&mut store, future_skin, intelligent_cheese, hypnotic_beginner);
/// let cardinality_tou = Cardinality::test_default(&mut store);
/// let messy_drum = "lacking_side".to_owned();
/// let eight_riddle = "fretful_girls".to_owned();
/// let referrer_hqs = Referrer::new(&mut store, &conditionality_pgx, &object_ejh, &cardinality_tou, messy_drum, eight_riddle);
///
/// let binary = Binary::new(&mut store, &referent_iva, &referrer_hqs, 42);
/// let binary_xmr = sarzak_get_one_r_bin_across_r6!(referrer_hqs, store);
///
/// assert_eq!(&binary, binary_xmr);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_bin_across_r6-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_bin_across_r6 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referrer-binary-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_binary()
            .find(|z| z.1.from == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referrer-binary-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_bin_across_r6;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_bin_across_r6-emit_binary_main"}}}

/// Macro to traverse [`Event`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R19_
///
/// This macro expects a &[`Event`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Event
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_obj_across_r19;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let statuesque_key = "polite_place".to_owned();
/// let tacit_word = "important_creator".to_owned();
/// let unique_liquid = "previous_plastic".to_owned();
/// let object_odu = Object::new(&mut store, statuesque_key, tacit_word, unique_liquid);
/// let unkempt_action = "cloudy_garden".to_owned();
///
/// let event = Event::new(&mut store, &object_odu, unkempt_action);
///
/// let object_rzc = sarzak_get_one_obj_across_r19!(event, store);
/// assert_eq!(&object_odu, object_rzc);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r19-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r19 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r19;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r19-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Event`][ðŸ¦ž], via _R19(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Event`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Event
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak_maybe_get_many_es_across_r19;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let well_groomed_lip = "obtainable_rail".to_owned();
/// let scandalous_pig = "burly_cracker".to_owned();
/// let five_mist = "obsolete_unit".to_owned();
/// let object_izh = Object::new(&mut store, well_groomed_lip, scandalous_pig, five_mist);
/// let decorous_bridge = "nervous_cannon".to_owned();
///
/// let event = Event::new(&mut store, &object_izh, decorous_bridge);
/// let event_mqv = sarzak_maybe_get_many_es_across_r19!(object_izh, store);
///
/// assert!(event_mqv.iter().find(|&x| **x == event).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_es_across_r19-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_es_across_r19 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-event-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_event()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Event>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-event-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_es_across_r19;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_es_across_r19-emit_binary_main"}}}

/// Macro to traverse [`Attribute`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R1(c)_
///
/// This macro expects a &[`Attribute`][ðŸ¦€], and returns an Option<&[`Object`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Attribute
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak_maybe_get_one_obj_across_r1;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let dramatic_size = "military_grain".to_owned();
/// let married_driving = "efficient_lunch".to_owned();
/// let tasteful_oven = "flowery_fog".to_owned();
/// let object = Object::new(&mut store, dramatic_size, married_driving, tasteful_oven);
/// let type_lwr = Type::test_default(&mut store);
/// let cut_hand = "tremendous_regret".to_owned();
/// let languid_hope = "hurried_cattle".to_owned();
/// let enormous_brain = "handsome_rod".to_owned();
/// let rhetorical_development = "stiff_group".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_lwr, cut_hand);
///
/// let object_lem = sarzak_maybe_get_one_obj_across_r1!(attribute, store);
/// assert_eq!(Some(&object), object_lem);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_one_obj_across_r1-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_one_obj_across_r1 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_conditional"}}}
        // nut::codegen::template::macros::emit_one_conditional
        match &$input.obj_id {
            Some(i) => $store.exhume_object(i),
            None => None,
        }
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_conditional"}}}
    }};
}
pub use sarzak_maybe_get_one_obj_across_r1;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_one_obj_across_r1-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Attribute`][ðŸ¦ž], via _R1_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns a &[`Attribute`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Attribute
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak_get_many_as_across_r1;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let steadfast_sponge = "silent_beds".to_owned();
/// let purple_garden = "acrid_quartz".to_owned();
/// let thoughtful_cast = "grieving_debt".to_owned();
/// let illustrious_debt = "third_rain".to_owned();
/// let frail_creator = "thoughtless_stick".to_owned();
/// let acoustic_health = "knotty_seat".to_owned();
/// let object = Object::new(&mut store, illustrious_debt, frail_creator, acoustic_health);
/// let type_ovr = Type::test_default(&mut store);
/// let joyous_hen = "unwieldy_position".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_ovr, joyous_hen);
///
/// let attribute_fgb = sarzak_get_many_as_across_r1!(object, store);
/// assert!(attribute_fgb.iter().find(|&x| **x == attribute).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_as_across_r1-emit_binary_main"}}}
macro_rules! sarzak_get_many_as_across_r1 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-attribute-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_attribute()
            .filter_map(|z| if z.1.obj_id == Some($input.id) { Some(z.1) } else { None })
            .collect::<Vec<&Attribute>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-attribute-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_get_many_as_across_r1;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_as_across_r1-emit_binary_main"}}}

/// Macro to traverse [`Subtype`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R15_
///
/// This macro expects a &[`Subtype`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Subtype
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak_get_one_obj_across_r15;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let stupid_stick = "aquatic_wire".to_owned();
/// let wrong_memory = "deranged_journey".to_owned();
/// let irritating_goat = "tacky_plant".to_owned();
/// let object_tfu = Object::new(&mut store, stupid_stick, wrong_memory, irritating_goat);
/// let supertype_lgy = Supertype::new(&mut store, &object_tfu);
/// let isa_sjz = Isa::new(&mut store, &supertype_lgy, 42);
/// let thoughtful_border = "stupid_knife".to_owned();
/// let descriptive_attraction = "uptight_part".to_owned();
/// let fearful_hearing = "slim_border".to_owned();
/// let object_dxb = Object::new(&mut store, thoughtful_border, descriptive_attraction, fearful_hearing);
///
/// let subtype = Subtype::new(&mut store, &isa_sjz, &object_dxb);
///
/// let object_jww = sarzak_get_one_obj_across_r15!(subtype, store);
/// assert_eq!(&object_dxb, object_jww);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r15-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r15 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r15;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r15-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Subtype`][ðŸ¦ž], via _R15(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Subtype`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Subtype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak_maybe_get_many_r_subs_across_r15;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let purring_punishment = "sophisticated_belief".to_owned();
/// let scandalous_apparel = "well_groomed_oven".to_owned();
/// let light_crayon = "happy_twist".to_owned();
/// let object_kdf = Object::new(&mut store, purring_punishment, scandalous_apparel, light_crayon);
/// let supertype_cen = Supertype::new(&mut store, &object_kdf);
/// let isa_xih = Isa::new(&mut store, &supertype_cen, 42);
/// let annoyed_joke = "lively_secretary".to_owned();
/// let mountainous_yam = "ultra_step".to_owned();
/// let detailed_texture = "cool_soap".to_owned();
/// let object_iql = Object::new(&mut store, annoyed_joke, mountainous_yam, detailed_texture);
///
/// let subtype = Subtype::new(&mut store, &isa_xih, &object_iql);
/// let subtype_qgy = sarzak_maybe_get_many_r_subs_across_r15!(object_iql, store);
///
/// assert!(subtype_qgy.iter().find(|&x| **x == subtype).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_subs_across_r15-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_subs_across_r15 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-subtype-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_subtype()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Subtype>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-subtype-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_subs_across_r15;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_subs_across_r15-emit_binary_main"}}}

/// Macro to traverse [`Associative`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R23_
///
/// This macro expects a &[`Associative`][ðŸ¦€], and returns a &[`AssociativeReferent`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Associative
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_ass_to_across_r23;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let drab_education = "pastoral_yak".to_owned();
/// let psychotic_vegetable = "odd_dinner".to_owned();
/// let jittery_limit = "disturbed_rub".to_owned();
/// let object_ijk = Object::new(&mut store, drab_education, psychotic_vegetable, jittery_limit);
/// let associative_referent_dyc = AssociativeReferent::new(&mut store, &object_ijk);
/// let ceaseless_thing = "macabre_opinion".to_owned();
/// let sable_apparatus = "capricious_mom".to_owned();
/// let agreeable_level = "obese_scale".to_owned();
/// let object_ffq = Object::new(&mut store, ceaseless_thing, sable_apparatus, agreeable_level);
/// let associative_referent_zbd = AssociativeReferent::new(&mut store, &object_ffq);
/// let miniature_substance = "silent_border".to_owned();
/// let adhesive_verse = "young_selection".to_owned();
/// let boundless_wax = "afraid_feeling".to_owned();
/// let object_pyv = Object::new(&mut store, miniature_substance, adhesive_verse, boundless_wax);
/// let associative_referrer_vic = AssociativeReferrer::new(&mut store, &object_pyv);
///
/// let associative = Associative::new(&mut store, &associative_referent_dyc, &associative_referent_zbd, &associative_referrer_vic, 42);
///
/// let associative_referent_lpu = sarzak_get_one_ass_to_across_r23!(associative, store);
/// assert_eq!(&associative_referent_dyc, associative_referent_lpu);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_ass_to_across_r23-emit_binary_main"}}}
macro_rules! sarzak_get_one_ass_to_across_r23 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_associative_referent(&$input.one).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_ass_to_across_r23;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_ass_to_across_r23-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Associative`][ðŸ¦ž], via _R23_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Associative`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Associative
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_r_assoc_across_r23;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let whimsical_coat = "thundering_cushion".to_owned();
/// let square_belief = "military_mom".to_owned();
/// let sneaky_boys = "evanescent_servant".to_owned();
/// let object_dxy = Object::new(&mut store, whimsical_coat, square_belief, sneaky_boys);
/// let associative_referent_ppg = AssociativeReferent::new(&mut store, &object_dxy);
/// let oafish_feather = "obtainable_friends".to_owned();
/// let long_term_rabbits = "overjoyed_fall".to_owned();
/// let measly_protest = "resolute_coast".to_owned();
/// let object_akh = Object::new(&mut store, oafish_feather, long_term_rabbits, measly_protest);
/// let associative_referent_okt = AssociativeReferent::new(&mut store, &object_akh);
/// let complex_banana = "mute_plants".to_owned();
/// let afraid_way = "possible_play".to_owned();
/// let glistening_elbow = "flaky_quarter".to_owned();
/// let object_awm = Object::new(&mut store, complex_banana, afraid_way, glistening_elbow);
/// let associative_referrer_ccx = AssociativeReferrer::new(&mut store, &object_awm);
///
/// let associative = Associative::new(&mut store, &associative_referent_ppg, &associative_referent_okt, &associative_referrer_ccx, 42);
/// let associative_ijf = sarzak_get_one_r_assoc_across_r23!(associative_referent_ppg, store);
///
/// assert_eq!(&associative, associative_ijf);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_assoc_across_r23-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_assoc_across_r23 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_associative()
            .find(|z| z.1.one == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_assoc_across_r23;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_assoc_across_r23-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R25_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_obj_across_r25;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let defective_color = "two_lead".to_owned();
/// let rhetorical_sound = "rambunctious_profit".to_owned();
/// let breezy_trousers = "stale_crack".to_owned();
/// let object_wnc = Object::new(&mut store, defective_color, rhetorical_sound, breezy_trousers);
///
/// let associative_referent = AssociativeReferent::new(&mut store, &object_wnc);
///
/// let object_juy = sarzak_get_one_obj_across_r25!(associative_referent, store);
/// assert_eq!(&object_wnc, object_juy);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r25-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r25 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r25;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r25-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R25(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`AssociativeReferent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak_maybe_get_many_ass_tos_across_r25;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let needy_shape = "strange_brush".to_owned();
/// let joyous_low = "right_power".to_owned();
/// let terrific_zoo = "grotesque_reason".to_owned();
/// let object_pjh = Object::new(&mut store, needy_shape, joyous_low, terrific_zoo);
///
/// let associative_referent = AssociativeReferent::new(&mut store, &object_pjh);
/// let associative_referent_fpt = sarzak_maybe_get_many_ass_tos_across_r25!(object_pjh, store);
///
/// assert!(associative_referent_fpt.iter().find(|&x| **x == associative_referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ass_tos_across_r25-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ass_tos_across_r25 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-associative_referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_associative_referent()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&AssociativeReferent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-associative_referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ass_tos_across_r25;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ass_tos_across_r25-emit_binary_main"}}}

/// Macro to traverse [`Binary`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R5_
///
/// This macro expects a &[`Binary`][ðŸ¦€], and returns a &[`Referent`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Binary
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_r_to_across_r5;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_azi = Conditionality::test_default(&mut store);
/// let sordid_crush = "exuberant_air".to_owned();
/// let questionable_park = "guiltless_destruction".to_owned();
/// let excellent_process = "aloof_caption".to_owned();
/// let object_vyr = Object::new(&mut store, sordid_crush, questionable_park, excellent_process);
/// let cardinality_uyx = Cardinality::test_default(&mut store);
/// let violet_plants = "narrow_lip".to_owned();
/// let referent_qdi = Referent::new(&mut store, &conditionality_azi, &object_vyr, &cardinality_uyx, violet_plants);
/// let conditionality_fvb = Conditionality::test_default(&mut store);
/// let groovy_rabbit = "placid_hands".to_owned();
/// let pleasant_potato = "uppity_cemetery".to_owned();
/// let abstracted_toes = "inconclusive_curtain".to_owned();
/// let object_fzj = Object::new(&mut store, groovy_rabbit, pleasant_potato, abstracted_toes);
/// let cardinality_bwr = Cardinality::test_default(&mut store);
/// let known_sisters = "gainful_smoke".to_owned();
/// let null_effect = "hanging_science".to_owned();
/// let referrer_rhh = Referrer::new(&mut store, &conditionality_fvb, &object_fzj, &cardinality_bwr, known_sisters, null_effect);
///
/// let binary = Binary::new(&mut store, &referent_qdi, &referrer_rhh, 42);
///
/// let referent_tjn = sarzak_get_one_r_to_across_r5!(binary, store);
/// assert_eq!(&referent_qdi, referent_tjn);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_to_across_r5-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_to_across_r5 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referent-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_referent(&$input.to).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referent-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_to_across_r5;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_to_across_r5-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Binary`][ðŸ¦ž], via _R5_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Binary`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Binary
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_get_one_r_bin_across_r5;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_txm = Conditionality::test_default(&mut store);
/// let majestic_grape = "lively_memory".to_owned();
/// let scandalous_believe = "periodic_board".to_owned();
/// let acrid_slip = "incompetent_sink".to_owned();
/// let object_qhe = Object::new(&mut store, majestic_grape, scandalous_believe, acrid_slip);
/// let cardinality_gqi = Cardinality::test_default(&mut store);
/// let psychotic_dolls = "one_minister".to_owned();
/// let referent_kzv = Referent::new(&mut store, &conditionality_txm, &object_qhe, &cardinality_gqi, psychotic_dolls);
/// let conditionality_rie = Conditionality::test_default(&mut store);
/// let easy_bear = "moldy_advice".to_owned();
/// let female_aftermath = "crabby_advice".to_owned();
/// let frightened_yard = "fixed_appliance".to_owned();
/// let object_whi = Object::new(&mut store, easy_bear, female_aftermath, frightened_yard);
/// let cardinality_sqw = Cardinality::test_default(&mut store);
/// let opposite_amusement = "zippy_friend".to_owned();
/// let disagreeable_tin = "shiny_squirrel".to_owned();
/// let referrer_iwh = Referrer::new(&mut store, &conditionality_rie, &object_whi, &cardinality_sqw, opposite_amusement, disagreeable_tin);
///
/// let binary = Binary::new(&mut store, &referent_kzv, &referrer_iwh, 42);
/// let binary_phe = sarzak_get_one_r_bin_across_r5!(referent_kzv, store);
///
/// assert_eq!(&binary, binary_phe);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_bin_across_r5-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_bin_across_r5 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referent-binary-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_binary()
            .find(|z| z.1.to == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referent-binary-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_bin_across_r5;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_bin_across_r5-emit_binary_main"}}}
