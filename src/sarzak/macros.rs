//! Macros for navigating the "Sarzak" domain
//!
//! # Generated Code -- edit _with care_.
//!
//! Don't mess with anything between `{"magic":"îž¨","kind":"CriticalBlockBegin"}`
//! and `{"magic":"îž¨","kind":"CriticalBlockEnd"}`. Otherwise, you should be free
//! to go wild. Happy hacking!
//!
//! Use the following invocation to reproduce:
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
//! ```shell
//!  sarzak gen -d sarzak sarzak -i true
//! ```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
// {"magic":"îž¨","version":"0.5.0"}
// {"magic":"îž¨","version":"1.0.0"}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R17_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak_get_one_obj_across_r17;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_yjz = Conditionality::test_default(&mut store);
/// let distinct_birthday = "gamy_rat".to_owned();
/// let dependent_spark = "thinkable_knife".to_owned();
/// let harmonious_stomach = "thoughtful_force".to_owned();
/// let object_mli = Object::new(&mut store, distinct_birthday, dependent_spark, harmonious_stomach);
/// let cardinality_xqo = Cardinality::test_default(&mut store);
/// let yielding_veil = "lying_soda".to_owned();
/// let aquatic_invention = "impossible_existence".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_yjz, &object_mli, &cardinality_xqo, yielding_veil, aquatic_invention);
///
/// let object_wbf = sarzak_get_one_obj_across_r17!(referrer, store);
/// assert_eq!(&object_mli, object_wbf);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r17-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r17 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r17;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r17-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R17(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Referrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_maybe_get_many_r_froms_across_r17;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_vjz = Conditionality::test_default(&mut store);
/// let one_earthquake = "large_death".to_owned();
/// let cloistered_impulse = "demonic_fog".to_owned();
/// let unkempt_insurance = "offbeat_show".to_owned();
/// let object_fdg = Object::new(&mut store, one_earthquake, cloistered_impulse, unkempt_insurance);
/// let cardinality_edt = Cardinality::test_default(&mut store);
/// let stale_engine = "furry_battle".to_owned();
/// let wandering_month = "kaput_doll".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_vjz, &object_fdg, &cardinality_edt, stale_engine, wandering_month);
/// let referrer_wlo = sarzak_maybe_get_many_r_froms_across_r17!(object_fdg, store);
///
/// assert!(referrer_wlo.iter().find(|&x| **x == referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_froms_across_r17-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_froms_across_r17 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referrer()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Referrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_froms_across_r17;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_froms_across_r17-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Cardinality`][ðŸ¦ž], via _R8_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Cardinality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Cardinality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_get_one_card_across_r8;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_jet = Conditionality::test_default(&mut store);
/// let thinkable_arm = "domineering_skin".to_owned();
/// let tawdry_turkey = "adhesive_oven".to_owned();
/// let humorous_step = "tart_fifth".to_owned();
/// let object_mwz = Object::new(&mut store, thinkable_arm, tawdry_turkey, humorous_step);
/// let cardinality_sua = Cardinality::test_default(&mut store);
/// let ragged_oil = "synonymous_bells".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_jet, &object_mwz, &cardinality_sua, ragged_oil);
///
/// let cardinality_nul = sarzak_get_one_card_across_r8!(referent, store);
/// assert_eq!(&cardinality_sua, cardinality_nul);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_card_across_r8-emit_binary_main"}}}
macro_rules! sarzak_get_one_card_across_r8 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_cardinality(&$input.cardinality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_card_across_r8;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_card_across_r8-emit_binary_main"}}}

/// Macro to traverse [`Cardinality`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R8(c)_
///
/// This macro expects a &[`Cardinality`][ðŸ¦€], and returns an Option<&[`Referent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Cardinality
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_maybe_get_many_r_tos_across_r8;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_yuk = Conditionality::test_default(&mut store);
/// let elfin_stop = "roasted_flavor".to_owned();
/// let lean_frame = "teeny_tiny_town".to_owned();
/// let sudden_stocking = "shiny_discovery".to_owned();
/// let object_odz = Object::new(&mut store, elfin_stop, lean_frame, sudden_stocking);
/// let cardinality_ihj = Cardinality::test_default(&mut store);
/// let tangy_silk = "chief_hydrant".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_yuk, &object_odz, &cardinality_ihj, tangy_silk);
/// let referent_vyj = sarzak_maybe_get_many_r_tos_across_r8!(cardinality_ihj, store);
///
/// assert!(referent_vyj.iter().find(|&x| **x == referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_tos_across_r8-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_tos_across_r8 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referent()
            .filter_map(|z| if z.1.cardinality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_tos_across_r8;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_tos_across_r8-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R16_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_get_one_obj_across_r16;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_qwn = Conditionality::test_default(&mut store);
/// let adamant_minister = "loose_steel".to_owned();
/// let vengeful_eggnog = "tense_caption".to_owned();
/// let overrated_comb = "chief_stream".to_owned();
/// let object_gun = Object::new(&mut store, adamant_minister, vengeful_eggnog, overrated_comb);
/// let cardinality_dcx = Cardinality::test_default(&mut store);
/// let incompetent_representative = "elite_care".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_qwn, &object_gun, &cardinality_dcx, incompetent_representative);
///
/// let object_dvi = sarzak_get_one_obj_across_r16!(referent, store);
/// assert_eq!(&object_gun, object_dvi);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r16-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r16 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r16;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r16-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R16(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Referent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_r_tos_across_r16;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_qta = Conditionality::test_default(&mut store);
/// let plucky_wheel = "grieving_society".to_owned();
/// let melted_skin = "available_fruit".to_owned();
/// let closed_daughter = "watery_stomach".to_owned();
/// let object_mtg = Object::new(&mut store, plucky_wheel, melted_skin, closed_daughter);
/// let cardinality_ivi = Cardinality::test_default(&mut store);
/// let learned_food = "tan_voice".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_qta, &object_mtg, &cardinality_ivi, learned_food);
/// let referent_whd = sarzak_maybe_get_many_r_tos_across_r16!(object_mtg, store);
///
/// assert!(referent_whd.iter().find(|&x| **x == referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_tos_across_r16-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_tos_across_r16 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referent()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Referent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_tos_across_r16;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_tos_across_r16-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Cardinality`][ðŸ¦ž], via _R88_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Cardinality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Cardinality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_card_across_r88;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_usm = Conditionality::test_default(&mut store);
/// let awesome_anger = "grumpy_bait".to_owned();
/// let fixed_stem = "bewildered_kitty".to_owned();
/// let weak_work = "thinkable_acoustics".to_owned();
/// let object_fjh = Object::new(&mut store, awesome_anger, fixed_stem, weak_work);
/// let cardinality_mul = Cardinality::test_default(&mut store);
/// let unbiased_clouds = "flat_current".to_owned();
///
/// let associative_referent = AssociativeReferent::new(&mut store, &conditionality_usm, &object_fjh, &cardinality_mul, unbiased_clouds);
///
/// let cardinality_mbu = sarzak_get_one_card_across_r88!(associative_referent, store);
/// assert_eq!(&cardinality_mul, cardinality_mbu);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_card_across_r88-emit_binary_main"}}}
macro_rules! sarzak_get_one_card_across_r88 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_cardinality(&$input.cardinality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_card_across_r88;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_card_across_r88-emit_binary_main"}}}

/// Macro to traverse [`Cardinality`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R88(c)_
///
/// This macro expects a &[`Cardinality`][ðŸ¦€], and returns an Option<&[`AssociativeReferent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Cardinality
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak_maybe_get_many_ass_tos_across_r88;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ads = Conditionality::test_default(&mut store);
/// let simplistic_loaf = "charming_deer".to_owned();
/// let robust_fall = "marked_muscle".to_owned();
/// let drunk_mother = "honorable_summer".to_owned();
/// let object_vgo = Object::new(&mut store, simplistic_loaf, robust_fall, drunk_mother);
/// let cardinality_nom = Cardinality::test_default(&mut store);
/// let illustrious_selection = "troubled_pocket".to_owned();
///
/// let associative_referent = AssociativeReferent::new(&mut store, &conditionality_ads, &object_vgo, &cardinality_nom, illustrious_selection);
/// let associative_referent_prf = sarzak_maybe_get_many_ass_tos_across_r88!(cardinality_nom, store);
///
/// assert!(associative_referent_prf.iter().find(|&x| **x == associative_referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ass_tos_across_r88-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ass_tos_across_r88 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-associative_referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_associative_referent()
            .filter_map(|z| if z.1.cardinality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&AssociativeReferent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-associative_referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ass_tos_across_r88;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ass_tos_across_r88-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Conditionality`][ðŸ¦ž], via _R77_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Conditionality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Conditionality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_get_one_cond_across_r77;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_sdi = Conditionality::test_default(&mut store);
/// let square_punishment = "null_earth".to_owned();
/// let lively_cow = "wet_distance".to_owned();
/// let open_ants = "functional_vest".to_owned();
/// let object_lfu = Object::new(&mut store, square_punishment, lively_cow, open_ants);
/// let cardinality_arj = Cardinality::test_default(&mut store);
/// let chief_tent = "wasteful_square".to_owned();
///
/// let associative_referent = AssociativeReferent::new(&mut store, &conditionality_sdi, &object_lfu, &cardinality_arj, chief_tent);
///
/// let conditionality_pfq = sarzak_get_one_cond_across_r77!(associative_referent, store);
/// assert_eq!(&conditionality_sdi, conditionality_pfq);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_cond_across_r77-emit_binary_main"}}}
macro_rules! sarzak_get_one_cond_across_r77 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_conditionality(&$input.conditionality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_cond_across_r77;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_cond_across_r77-emit_binary_main"}}}

/// Macro to traverse [`Conditionality`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R77(c)_
///
/// This macro expects a &[`Conditionality`][ðŸ¦€], and returns an Option<&[`AssociativeReferent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Conditionality
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak_maybe_get_many_ass_tos_across_r77;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_dva = Conditionality::test_default(&mut store);
/// let agonizing_net = "unruly_transport".to_owned();
/// let capricious_question = "longing_ear".to_owned();
/// let troubled_minister = "spectacular_debt".to_owned();
/// let object_ndc = Object::new(&mut store, agonizing_net, capricious_question, troubled_minister);
/// let cardinality_dzo = Cardinality::test_default(&mut store);
/// let reflective_trees = "ahead_stomach".to_owned();
///
/// let associative_referent = AssociativeReferent::new(&mut store, &conditionality_dva, &object_ndc, &cardinality_dzo, reflective_trees);
/// let associative_referent_ptq = sarzak_maybe_get_many_ass_tos_across_r77!(conditionality_dva, store);
///
/// assert!(associative_referent_ptq.iter().find(|&x| **x == associative_referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ass_tos_across_r77-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ass_tos_across_r77 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-associative_referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_associative_referent()
            .filter_map(|z| if z.1.conditionality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&AssociativeReferent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-associative_referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ass_tos_across_r77;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ass_tos_across_r77-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Conditionality`][ðŸ¦ž], via _R12_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Conditionality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Conditionality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_get_one_cond_across_r12;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ian = Conditionality::test_default(&mut store);
/// let crazy_respect = "creepy_string".to_owned();
/// let pricey_ocean = "defeated_trains".to_owned();
/// let dazzling_horses = "blue_bath".to_owned();
/// let object_hpm = Object::new(&mut store, crazy_respect, pricey_ocean, dazzling_horses);
/// let cardinality_xvf = Cardinality::test_default(&mut store);
/// let one_help = "heavenly_cork".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_ian, &object_hpm, &cardinality_xvf, one_help);
///
/// let conditionality_grx = sarzak_get_one_cond_across_r12!(referent, store);
/// assert_eq!(&conditionality_ian, conditionality_grx);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_cond_across_r12-emit_binary_main"}}}
macro_rules! sarzak_get_one_cond_across_r12 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_conditionality(&$input.conditionality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_cond_across_r12;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_cond_across_r12-emit_binary_main"}}}

/// Macro to traverse [`Conditionality`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R12(c)_
///
/// This macro expects a &[`Conditionality`][ðŸ¦€], and returns an Option<&[`Referent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Conditionality
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_r_tos_across_r12;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_plw = Conditionality::test_default(&mut store);
/// let second_hand_needle = "heartbreaking_grandfather".to_owned();
/// let redundant_step = "rotten_wing".to_owned();
/// let unique_attempt = "physical_crack".to_owned();
/// let object_fji = Object::new(&mut store, second_hand_needle, redundant_step, unique_attempt);
/// let cardinality_ltm = Cardinality::test_default(&mut store);
/// let guarded_belief = "cute_balance".to_owned();
///
/// let referent = Referent::new(&mut store, &conditionality_plw, &object_fji, &cardinality_ltm, guarded_belief);
/// let referent_gam = sarzak_maybe_get_many_r_tos_across_r12!(conditionality_plw, store);
///
/// assert!(referent_gam.iter().find(|&x| **x == referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_tos_across_r12-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_tos_across_r12 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referent()
            .filter_map(|z| if z.1.conditionality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_tos_across_r12;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_tos_across_r12-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferrer`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R26_
///
/// This macro expects a &[`AssociativeReferrer`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferrer
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_obj_across_r26;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let steadfast_wealth = "berserk_lead".to_owned();
/// let legal_lock = "unequaled_destruction".to_owned();
/// let proud_birth = "cuddly_toe".to_owned();
/// let object_whl = Object::new(&mut store, steadfast_wealth, legal_lock, proud_birth);
/// let cardinality_pli = Cardinality::test_default(&mut store);
/// let filthy_debt = "incredible_meat".to_owned();
/// let certain_cent = "vagabond_guide".to_owned();
///
/// let associative_referrer = AssociativeReferrer::new(&mut store, &object_whl, &cardinality_pli, filthy_debt, certain_cent);
///
/// let object_dee = sarzak_get_one_obj_across_r26!(associative_referrer, store);
/// assert_eq!(&object_whl, object_dee);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r26-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r26 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r26;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r26-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`AssociativeReferrer`][ðŸ¦ž], via _R26(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`AssociativeReferrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_maybe_get_many_ass_froms_across_r26;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let skillful_rain = "alive_power".to_owned();
/// let parched_blow = "shivering_base".to_owned();
/// let rapid_mouth = "confused_humor".to_owned();
/// let object_pex = Object::new(&mut store, skillful_rain, parched_blow, rapid_mouth);
/// let cardinality_qdt = Cardinality::test_default(&mut store);
/// let incandescent_pigs = "reflective_grape".to_owned();
/// let hellish_faucet = "safe_cook".to_owned();
///
/// let associative_referrer = AssociativeReferrer::new(&mut store, &object_pex, &cardinality_qdt, incandescent_pigs, hellish_faucet);
/// let associative_referrer_oek = sarzak_maybe_get_many_ass_froms_across_r26!(object_pex, store);
///
/// assert!(associative_referrer_oek.iter().find(|&x| **x == associative_referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ass_froms_across_r26-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ass_froms_across_r26 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-associative_referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_associative_referrer()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&AssociativeReferrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-associative_referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ass_froms_across_r26;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ass_froms_across_r26-emit_binary_main"}}}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Conditionality`][ðŸ¦ž], via _R11_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Conditionality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Conditionality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_cond_across_r11;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_pyd = Conditionality::test_default(&mut store);
/// let absorbing_caption = "grateful_harbor".to_owned();
/// let stupid_camera = "functional_agreement".to_owned();
/// let aquatic_cellar = "discreet_wealth".to_owned();
/// let object_gas = Object::new(&mut store, absorbing_caption, stupid_camera, aquatic_cellar);
/// let cardinality_wdk = Cardinality::test_default(&mut store);
/// let ad_kiss = "rambunctious_mom".to_owned();
/// let neat_earthquake = "combative_throat".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_pyd, &object_gas, &cardinality_wdk, ad_kiss, neat_earthquake);
///
/// let conditionality_nig = sarzak_get_one_cond_across_r11!(referrer, store);
/// assert_eq!(&conditionality_pyd, conditionality_nig);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_cond_across_r11-emit_binary_main"}}}
macro_rules! sarzak_get_one_cond_across_r11 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_conditionality(&$input.conditionality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_cond_across_r11;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_cond_across_r11-emit_binary_main"}}}

/// Macro to traverse [`Conditionality`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R11(c)_
///
/// This macro expects a &[`Conditionality`][ðŸ¦€], and returns an Option<&[`Referrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Conditionality
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_maybe_get_many_r_froms_across_r11;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_iju = Conditionality::test_default(&mut store);
/// let opposite_engine = "fantastic_connection".to_owned();
/// let deafening_sheep = "wise_dirt".to_owned();
/// let long_rain = "thin_gun".to_owned();
/// let object_ufc = Object::new(&mut store, opposite_engine, deafening_sheep, long_rain);
/// let cardinality_xum = Cardinality::test_default(&mut store);
/// let shocking_print = "whole_glue".to_owned();
/// let jagged_pull = "shaggy_church".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_iju, &object_ufc, &cardinality_xum, shocking_print, jagged_pull);
/// let referrer_svv = sarzak_maybe_get_many_r_froms_across_r11!(conditionality_iju, store);
///
/// assert!(referrer_svv.iter().find(|&x| **x == referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_froms_across_r11-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_froms_across_r11 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"conditionality-referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referrer()
            .filter_map(|z| if z.1.conditionality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"conditionality-referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_froms_across_r11;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_froms_across_r11-emit_binary_main"}}}

/// Macro to traverse [`Subtype`][ðŸ¦€] âž¡ [`Isa`][ðŸ¦ž], via _R27_
///
/// This macro expects a &[`Subtype`][ðŸ¦€], and returns a &[`Isa`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Subtype
/// [ðŸ¦ž]: crate::sarzak::types::Isa
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak_get_one_r_isa_across_r27;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let functional_bell = "previous_price".to_owned();
/// let husky_country = "obtainable_angle".to_owned();
/// let woozy_nut = "wistful_bear".to_owned();
/// let object_ope = Object::new(&mut store, functional_bell, husky_country, woozy_nut);
/// let supertype_eol = Supertype::new(&mut store, &object_ope);
/// let isa_jdp = Isa::new(&mut store, &supertype_eol, 42);
/// let satisfying_receipt = "wacky_coach".to_owned();
/// let hospitable_soup = "outgoing_drink".to_owned();
/// let stimulating_kiss = "telling_leaf".to_owned();
/// let object_pbg = Object::new(&mut store, satisfying_receipt, hospitable_soup, stimulating_kiss);
///
/// let subtype = Subtype::new(&mut store, &isa_jdp, &object_pbg);
///
/// let isa_hfn = sarzak_get_one_r_isa_across_r27!(subtype, store);
/// assert_eq!(&isa_jdp, isa_hfn);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_isa_across_r27-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_isa_across_r27 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"isa-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_isa(&$input.isa).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"isa-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_isa_across_r27;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_isa_across_r27-emit_binary_main"}}}

/// Macro to traverse [`Isa`][ðŸ¦€] âž¡ [`Subtype`][ðŸ¦ž], via _R27_
///
/// This macro expects a &[`Isa`][ðŸ¦€], and returns a &[`Subtype`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Isa
/// [ðŸ¦ž]: crate::sarzak::types::Subtype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak_get_many_r_subs_across_r27;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let soft_cause = "far_question".to_owned();
/// let tacit_earthquake = "acid_self".to_owned();
/// let sleepy_year = "handsome_car".to_owned();
/// let object_iwp = Object::new(&mut store, soft_cause, tacit_earthquake, sleepy_year);
/// let supertype_fgw = Supertype::new(&mut store, &object_iwp);
/// let isa_jip = Isa::new(&mut store, &supertype_fgw, 42);
/// let aberrant_year = "bashful_grip".to_owned();
/// let deranged_ticket = "parched_market".to_owned();
/// let long_term_monkey = "agonizing_story".to_owned();
/// let object_teg = Object::new(&mut store, aberrant_year, deranged_ticket, long_term_monkey);
///
/// let subtype = Subtype::new(&mut store, &isa_jip, &object_teg);
/// let subtype_flz = sarzak_get_many_r_subs_across_r27!(isa_jip, store);
///
/// assert!(subtype_flz.iter().find(|&x| **x == subtype).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_r_subs_across_r27-emit_binary_main"}}}
macro_rules! sarzak_get_many_r_subs_across_r27 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"isa-subtype-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_subtype()
            .filter_map(|z| if z.1.isa == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Subtype>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"isa-subtype-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_get_many_r_subs_across_r27;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_r_subs_across_r27-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferrer`][ðŸ¦€] âž¡ [`Cardinality`][ðŸ¦ž], via _R89_
///
/// This macro expects a &[`AssociativeReferrer`][ðŸ¦€], and returns a &[`Cardinality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferrer
/// [ðŸ¦ž]: crate::sarzak::types::Cardinality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak_get_one_card_across_r89;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let berserk_receipt = "abounding_fan".to_owned();
/// let heady_giants = "used_dolls".to_owned();
/// let mixed_jelly = "bad_form".to_owned();
/// let object_nwl = Object::new(&mut store, berserk_receipt, heady_giants, mixed_jelly);
/// let cardinality_gnr = Cardinality::test_default(&mut store);
/// let assorted_sun = "synonymous_route".to_owned();
/// let nice_rod = "scared_kettle".to_owned();
///
/// let associative_referrer = AssociativeReferrer::new(&mut store, &object_nwl, &cardinality_gnr, assorted_sun, nice_rod);
///
/// let cardinality_isj = sarzak_get_one_card_across_r89!(associative_referrer, store);
/// assert_eq!(&cardinality_gnr, cardinality_isj);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_card_across_r89-emit_binary_main"}}}
macro_rules! sarzak_get_one_card_across_r89 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_cardinality(&$input.cardinality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_card_across_r89;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_card_across_r89-emit_binary_main"}}}

/// Macro to traverse [`Cardinality`][ðŸ¦€] âž¡ [`AssociativeReferrer`][ðŸ¦ž], via _R89(c)_
///
/// This macro expects a &[`Cardinality`][ðŸ¦€], and returns an Option<&[`AssociativeReferrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Cardinality
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_ass_froms_across_r89;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let stale_end = "absorbing_brothers".to_owned();
/// let energetic_crayon = "probable_building".to_owned();
/// let grouchy_cobweb = "needless_spoon".to_owned();
/// let object_dhn = Object::new(&mut store, stale_end, energetic_crayon, grouchy_cobweb);
/// let cardinality_cri = Cardinality::test_default(&mut store);
/// let maddening_fact = "instinctive_cable".to_owned();
/// let forgetful_blade = "modern_playground".to_owned();
///
/// let associative_referrer = AssociativeReferrer::new(&mut store, &object_dhn, &cardinality_cri, maddening_fact, forgetful_blade);
/// let associative_referrer_jeq = sarzak_maybe_get_many_ass_froms_across_r89!(cardinality_cri, store);
///
/// assert!(associative_referrer_jeq.iter().find(|&x| **x == associative_referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ass_froms_across_r89-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ass_froms_across_r89 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-associative_referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_associative_referrer()
            .filter_map(|z| if z.1.cardinality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&AssociativeReferrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-associative_referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ass_froms_across_r89;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ass_froms_across_r89-emit_binary_main"}}}

/// Macro to traverse [`Isa`][ðŸ¦€] âž¡ [`Supertype`][ðŸ¦ž], via _R13_
///
/// This macro expects a &[`Isa`][ðŸ¦€], and returns a &[`Supertype`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Isa
/// [ðŸ¦ž]: crate::sarzak::types::Supertype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak_get_one_r_sup_across_r13;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let dry_thrill = "frail_guitar".to_owned();
/// let spiritual_action = "befitting_jar".to_owned();
/// let uncovered_wish = "powerful_low".to_owned();
/// let object_dps = Object::new(&mut store, dry_thrill, spiritual_action, uncovered_wish);
/// let supertype_iiy = Supertype::new(&mut store, &object_dps);
///
/// let isa = Isa::new(&mut store, &supertype_iiy, 42);
///
/// let supertype_gup = sarzak_get_one_r_sup_across_r13!(isa, store);
/// assert_eq!(&supertype_iiy, supertype_gup);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_sup_across_r13-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_sup_across_r13 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"supertype-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_supertype(&$input.supertype).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"supertype-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_sup_across_r13;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_sup_across_r13-emit_binary_main"}}}

/// Macro to traverse [`Supertype`][ðŸ¦€] âž¡ [`Isa`][ðŸ¦ž], via _R13_
///
/// This macro expects a &[`Supertype`][ðŸ¦€], and returns a &[`Isa`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Supertype
/// [ðŸ¦ž]: crate::sarzak::types::Isa
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak_get_one_r_isa_across_r13;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let forgetful_adjustment = "curious_channel".to_owned();
/// let grieving_sea = "hollow_summer".to_owned();
/// let shaky_haircut = "scared_income".to_owned();
/// let object_ojo = Object::new(&mut store, forgetful_adjustment, grieving_sea, shaky_haircut);
/// let supertype_blq = Supertype::new(&mut store, &object_ojo);
///
/// let isa = Isa::new(&mut store, &supertype_blq, 42);
/// let isa_oie = sarzak_get_one_r_isa_across_r13!(supertype_blq, store);
///
/// assert_eq!(&isa, isa_oie);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_isa_across_r13-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_isa_across_r13 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"supertype-isa-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_isa()
            .find(|z| z.1.supertype == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"supertype-isa-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_isa_across_r13;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_isa_across_r13-emit_binary_main"}}}

/// Macro to traverse [`State`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R18_
///
/// This macro expects a &[`State`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::State
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_obj_across_r18;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let odd_library = "married_dock".to_owned();
/// let next_drop = "purple_stop".to_owned();
/// let acid_grain = "slippery_spark".to_owned();
/// let object_jbs = Object::new(&mut store, odd_library, next_drop, acid_grain);
/// let pumped_destruction = "faint_fight".to_owned();
///
/// let state = State::new(&mut store, &object_jbs, pumped_destruction);
///
/// let object_ewg = sarzak_get_one_obj_across_r18!(state, store);
/// assert_eq!(&object_jbs, object_ewg);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r18-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r18 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r18;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r18-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`State`][ðŸ¦ž], via _R18(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`State`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::State
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_ss_across_r18;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let friendly_shame = "clear_nut".to_owned();
/// let nervous_breath = "grubby_back".to_owned();
/// let shallow_family = "frightened_frog".to_owned();
/// let object_lxp = Object::new(&mut store, friendly_shame, nervous_breath, shallow_family);
/// let quack_smoke = "somber_swing".to_owned();
///
/// let state = State::new(&mut store, &object_lxp, quack_smoke);
/// let state_ntt = sarzak_maybe_get_many_ss_across_r18!(object_lxp, store);
///
/// assert!(state_ntt.iter().find(|&x| **x == state).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ss_across_r18-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ss_across_r18 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-state-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_state()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&State>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-state-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ss_across_r18;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ss_across_r18-emit_binary_main"}}}

/// Macro to traverse [`State`][ðŸ¦€] âž¡ [`Event`][ðŸ¦ž], across [`AcknowledgedEvent`][ðŸ¦‘] via _R20_
///
/// This macro expects a &[`State`][ðŸ¦€], and returns a &[`Event`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_associative_macros`
///
/// [ðŸ¦€]: crate::sarzak::types::State
/// [ðŸ¦ž]: crate::sarzak::types::Event
/// [ðŸ¦‘]: crate::sarzak::types::AcknowledgedEvent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AcknowledgedEvent;
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_many_e_across_r20;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let useless_hole = "apathetic_yak".to_owned();
/// let electric_believe = "sharp_sticks".to_owned();
/// let voiceless_pipe = "boring_dust".to_owned();
/// let object_zuf = Object::new(&mut store, useless_hole, electric_believe, voiceless_pipe);
/// let icky_chairs = "obsequious_wind".to_owned();
/// let state_vkz = State::new(&mut store, &object_zuf, icky_chairs);
/// let nasty_prison = "tranquil_wood".to_owned();
/// let huge_art = "flippant_addition".to_owned();
/// let simplistic_hot = "harmonious_record".to_owned();
/// let object_dlq = Object::new(&mut store, nasty_prison, huge_art, simplistic_hot);
/// let marvelous_fog = "sore_string".to_owned();
/// let event_jxs = Event::new(&mut store, &object_dlq, marvelous_fog);
/// let acknowledged_event = AcknowledgedEvent::new(&mut store, &state_vkz, &event_jxs);
///
/// let event_njm = sarzak_get_many_e_across_r20!(state_vkz, store);
/// assert!(event_njm.iter().find(|&x| **x == event_jxs).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_e_across_r20-emit_associative_main"}}}
macro_rules! sarzak_get_many_e_across_r20 {
    ($input:expr, $store:expr) => {{
        // nut::codegen::template::macros::emit_assoc_many
        $store
            .iter_acknowledged_event()
            .filter(|a| a.1.state_id == $input.id)
            .map(|a| $store.exhume_event(&a.1.event_id).unwrap())
            .collect::<Vec<&Event>>()
    }};
}
pub use sarzak_get_many_e_across_r20;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_e_across_r20-emit_associative_main"}}}

/// Macro to traverse [`Event`][ðŸ¦€] âž¡ [`State`][ðŸ¦ž], across [`AcknowledgedEvent`][ðŸ¦‘] via _R20_
///
/// This macro expects a &[`Event`][ðŸ¦€], and returns a &[`State`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_associative_macros`
///
/// [ðŸ¦€]: crate::sarzak::types::Event
/// [ðŸ¦ž]: crate::sarzak::types::State
/// [ðŸ¦‘]: crate::sarzak::types::AcknowledgedEvent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AcknowledgedEvent;
/// # use sarzak::sarzak::State;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak_get_many_s_across_r20;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let somber_plough = "enormous_join".to_owned();
/// let entertaining_ring = "auspicious_prison".to_owned();
/// let unsuitable_clouds = "jumbled_minister".to_owned();
/// let object_vtp = Object::new(&mut store, somber_plough, entertaining_ring, unsuitable_clouds);
/// let didactic_comb = "valuable_police".to_owned();
/// let state_tqv = State::new(&mut store, &object_vtp, didactic_comb);
/// let nappy_slip = "thoughtful_clam".to_owned();
/// let voiceless_eggs = "apathetic_root".to_owned();
/// let icky_blow = "overconfident_thumb".to_owned();
/// let object_igl = Object::new(&mut store, nappy_slip, voiceless_eggs, icky_blow);
/// let even_bucket = "vagabond_oven".to_owned();
/// let event_vqr = Event::new(&mut store, &object_igl, even_bucket);
/// let acknowledged_event = AcknowledgedEvent::new(&mut store, &state_tqv, &event_vqr);
///
/// let state_vvx = sarzak_get_many_s_across_r20!(event_vqr, store);
/// assert!(state_vvx.iter().find(|&x| **x == state_tqv).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_s_across_r20-emit_associative_main"}}}
macro_rules! sarzak_get_many_s_across_r20 {
    ($input:expr, $store:expr) => {{
        // nut::codegen::template::macros::emit_assoc_many
        $store
            .iter_acknowledged_event()
            .filter(|a| a.1.event_id == $input.id)
            .map(|a| $store.exhume_state(&a.1.state_id).unwrap())
            .collect::<Vec<&State>>()
    }};
}
pub use sarzak_get_many_s_across_r20;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_s_across_r20-emit_associative_main"}}}

/// Macro to traverse [`Associative`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R22_
///
/// This macro expects a &[`Associative`][ðŸ¦€], and returns a &[`AssociativeReferent`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Associative
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_get_one_ass_to_across_r22;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ypg = Conditionality::test_default(&mut store);
/// let faithful_chess = "long_term_tree".to_owned();
/// let military_dog = "coordinated_party".to_owned();
/// let second_pest = "talented_magic".to_owned();
/// let object_rey = Object::new(&mut store, faithful_chess, military_dog, second_pest);
/// let cardinality_ocl = Cardinality::test_default(&mut store);
/// let prickly_harmony = "nippy_disease".to_owned();
/// let associative_referent_mcm = AssociativeReferent::new(&mut store, &conditionality_ypg, &object_rey, &cardinality_ocl, prickly_harmony);
/// let conditionality_ymy = Conditionality::test_default(&mut store);
/// let woozy_cable = "calm_arithmetic".to_owned();
/// let petite_protest = "erratic_star".to_owned();
/// let intelligent_join = "symptomatic_pollution".to_owned();
/// let object_ftd = Object::new(&mut store, woozy_cable, petite_protest, intelligent_join);
/// let cardinality_pot = Cardinality::test_default(&mut store);
/// let detailed_queen = "nonstop_spark".to_owned();
/// let associative_referent_phf = AssociativeReferent::new(&mut store, &conditionality_ymy, &object_ftd, &cardinality_pot, detailed_queen);
/// let strange_lettuce = "habitual_shirt".to_owned();
/// let succinct_jellyfish = "outgoing_lumber".to_owned();
/// let short_letter = "nine_planes".to_owned();
/// let object_lfp = Object::new(&mut store, strange_lettuce, succinct_jellyfish, short_letter);
/// let cardinality_efo = Cardinality::test_default(&mut store);
/// let aboard_oven = "uptight_cave".to_owned();
/// let heavenly_aunt = "adamant_night".to_owned();
/// let associative_referrer_raj = AssociativeReferrer::new(&mut store, &object_lfp, &cardinality_efo, aboard_oven, heavenly_aunt);
///
/// let associative = Associative::new(&mut store, &associative_referent_mcm, &associative_referent_phf, &associative_referrer_raj, 42);
///
/// let associative_referent_upv = sarzak_get_one_ass_to_across_r22!(associative, store);
/// assert_eq!(&associative_referent_phf, associative_referent_upv);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_ass_to_across_r22-emit_binary_main"}}}
macro_rules! sarzak_get_one_ass_to_across_r22 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_associative_referent(&$input.other).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_ass_to_across_r22;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_ass_to_across_r22-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Associative`][ðŸ¦ž], via _R22_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Associative`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Associative
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak_get_one_r_assoc_across_r22;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_rbb = Conditionality::test_default(&mut store);
/// let evasive_cherry = "heavy_destruction".to_owned();
/// let hulking_note = "fretful_jar".to_owned();
/// let gleaming_club = "likeable_van".to_owned();
/// let object_mvh = Object::new(&mut store, evasive_cherry, hulking_note, gleaming_club);
/// let cardinality_rli = Cardinality::test_default(&mut store);
/// let incompetent_glove = "level_garden".to_owned();
/// let associative_referent_xda = AssociativeReferent::new(&mut store, &conditionality_rbb, &object_mvh, &cardinality_rli, incompetent_glove);
/// let conditionality_eai = Conditionality::test_default(&mut store);
/// let subdued_dust = "graceful_birthday".to_owned();
/// let delicious_bushes = "spiteful_pie".to_owned();
/// let disgusting_sponge = "lush_car".to_owned();
/// let object_pbw = Object::new(&mut store, subdued_dust, delicious_bushes, disgusting_sponge);
/// let cardinality_xbt = Cardinality::test_default(&mut store);
/// let mellow_flock = "glamorous_attraction".to_owned();
/// let associative_referent_yuk = AssociativeReferent::new(&mut store, &conditionality_eai, &object_pbw, &cardinality_xbt, mellow_flock);
/// let gratis_plough = "spiky_error".to_owned();
/// let swanky_credit = "wrong_hands".to_owned();
/// let inconclusive_value = "debonair_porter".to_owned();
/// let object_hgu = Object::new(&mut store, gratis_plough, swanky_credit, inconclusive_value);
/// let cardinality_sog = Cardinality::test_default(&mut store);
/// let weary_touch = "offbeat_thought".to_owned();
/// let quiet_language = "broken_wren".to_owned();
/// let associative_referrer_kym = AssociativeReferrer::new(&mut store, &object_hgu, &cardinality_sog, weary_touch, quiet_language);
///
/// let associative = Associative::new(&mut store, &associative_referent_xda, &associative_referent_yuk, &associative_referrer_kym, 42);
/// // If you have the misfortune of finding yourself here again, the first argument, below,
/// // should be the third argument, above.
/// let associative_yss = sarzak_get_one_r_assoc_across_r22!(associative_referent_yuk, store);
///
/// assert_eq!(&associative, associative_yss);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_assoc_across_r22-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_assoc_across_r22 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_associative()
            .find(|z| z.1.other == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_assoc_across_r22;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_assoc_across_r22-emit_binary_main"}}}

/// Macro to traverse [`Supertype`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R14_
///
/// This macro expects a &[`Supertype`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Supertype
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak_get_one_obj_across_r14;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let annoyed_decision = "disillusioned_committee".to_owned();
/// let changeable_surprise = "illustrious_dust".to_owned();
/// let naughty_sky = "marked_lead".to_owned();
/// let object_pxi = Object::new(&mut store, annoyed_decision, changeable_surprise, naughty_sky);
///
/// let supertype = Supertype::new(&mut store, &object_pxi);
///
/// let object_uzq = sarzak_get_one_obj_across_r14!(supertype, store);
/// assert_eq!(&object_pxi, object_uzq);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r14-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r14 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r14;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r14-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Supertype`][ðŸ¦ž], via _R14(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Supertype`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Supertype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_r_sups_across_r14;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let murky_cheese = "blue_lizards".to_owned();
/// let nonstop_can = "aggressive_taste".to_owned();
/// let frequent_cream = "chief_wealth".to_owned();
/// let object_wak = Object::new(&mut store, murky_cheese, nonstop_can, frequent_cream);
///
/// let supertype = Supertype::new(&mut store, &object_wak);
/// let supertype_vug = sarzak_maybe_get_many_r_sups_across_r14!(object_wak, store);
///
/// assert!(supertype_vug.iter().find(|&x| **x == supertype).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_sups_across_r14-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_sups_across_r14 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-supertype-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_supertype()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Supertype>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-supertype-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_sups_across_r14;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_sups_across_r14-emit_binary_main"}}}

/// Macro to traverse [`Associative`][ðŸ¦€] âž¡ [`AssociativeReferrer`][ðŸ¦ž], via _R21_
///
/// This macro expects a &[`Associative`][ðŸ¦€], and returns a &[`AssociativeReferrer`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Associative
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak_get_one_ass_from_across_r21;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_opt = Conditionality::test_default(&mut store);
/// let homeless_yarn = "fearless_sign".to_owned();
/// let greedy_blow = "fertile_song".to_owned();
/// let decisive_science = "overt_bear".to_owned();
/// let object_eng = Object::new(&mut store, homeless_yarn, greedy_blow, decisive_science);
/// let cardinality_grf = Cardinality::test_default(&mut store);
/// let heavenly_behavior = "lowly_quiet".to_owned();
/// let associative_referent_gye = AssociativeReferent::new(&mut store, &conditionality_opt, &object_eng, &cardinality_grf, heavenly_behavior);
/// let conditionality_rll = Conditionality::test_default(&mut store);
/// let momentous_pipe = "gusty_bottle".to_owned();
/// let juvenile_ink = "electric_lead".to_owned();
/// let boundless_limit = "few_cactus".to_owned();
/// let object_nqx = Object::new(&mut store, momentous_pipe, juvenile_ink, boundless_limit);
/// let cardinality_mvn = Cardinality::test_default(&mut store);
/// let goofy_addition = "limping_news".to_owned();
/// let associative_referent_djh = AssociativeReferent::new(&mut store, &conditionality_rll, &object_nqx, &cardinality_mvn, goofy_addition);
/// let selfish_map = "agreeable_blood".to_owned();
/// let shaky_crayon = "cumbersome_calculator".to_owned();
/// let numerous_machine = "cute_beast".to_owned();
/// let object_lzu = Object::new(&mut store, selfish_map, shaky_crayon, numerous_machine);
/// let cardinality_vth = Cardinality::test_default(&mut store);
/// let round_truck = "wrong_boy".to_owned();
/// let redundant_coil = "habitual_apples".to_owned();
/// let associative_referrer_bgk = AssociativeReferrer::new(&mut store, &object_lzu, &cardinality_vth, round_truck, redundant_coil);
///
/// let associative = Associative::new(&mut store, &associative_referent_gye, &associative_referent_djh, &associative_referrer_bgk, 42);
///
/// let associative_referrer_sgl = sarzak_get_one_ass_from_across_r21!(associative, store);
/// assert_eq!(&associative_referrer_bgk, associative_referrer_sgl);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_ass_from_across_r21-emit_binary_main"}}}
macro_rules! sarzak_get_one_ass_from_across_r21 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referrer-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_associative_referrer(&$input.from).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referrer-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_ass_from_across_r21;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_ass_from_across_r21-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferrer`][ðŸ¦€] âž¡ [`Associative`][ðŸ¦ž], via _R21_
///
/// This macro expects a &[`AssociativeReferrer`][ðŸ¦€], and returns a &[`Associative`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferrer
/// [ðŸ¦ž]: crate::sarzak::types::Associative
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak_get_one_r_assoc_across_r21;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_oaf = Conditionality::test_default(&mut store);
/// let kind_knife = "grubby_wrist".to_owned();
/// let level_beetle = "known_hope".to_owned();
/// let untidy_mint = "enchanted_glove".to_owned();
/// let object_fvn = Object::new(&mut store, kind_knife, level_beetle, untidy_mint);
/// let cardinality_oyy = Cardinality::test_default(&mut store);
/// let straight_hook = "nappy_relation".to_owned();
/// let associative_referent_ijm = AssociativeReferent::new(&mut store, &conditionality_oaf, &object_fvn, &cardinality_oyy, straight_hook);
/// let conditionality_aem = Conditionality::test_default(&mut store);
/// let fearless_temper = "bite_sized_pie".to_owned();
/// let gamy_game = "agreeable_wash".to_owned();
/// let tenuous_quill = "puzzling_yam".to_owned();
/// let object_dyo = Object::new(&mut store, fearless_temper, gamy_game, tenuous_quill);
/// let cardinality_whg = Cardinality::test_default(&mut store);
/// let disastrous_act = "evasive_cent".to_owned();
/// let associative_referent_eys = AssociativeReferent::new(&mut store, &conditionality_aem, &object_dyo, &cardinality_whg, disastrous_act);
/// let lamentable_breath = "knowledgeable_band".to_owned();
/// let abashed_wine = "energetic_art".to_owned();
/// let massive_cause = "supreme_development".to_owned();
/// let object_zyb = Object::new(&mut store, lamentable_breath, abashed_wine, massive_cause);
/// let cardinality_pdx = Cardinality::test_default(&mut store);
/// let clear_picture = "abandoned_purpose".to_owned();
/// let fragile_insect = "quirky_snail".to_owned();
/// let associative_referrer_gth = AssociativeReferrer::new(&mut store, &object_zyb, &cardinality_pdx, clear_picture, fragile_insect);
///
/// let associative = Associative::new(&mut store, &associative_referent_ijm, &associative_referent_eys, &associative_referrer_gth, 42);
/// let associative_vxp = sarzak_get_one_r_assoc_across_r21!(associative_referrer_gth, store);
///
/// assert_eq!(&associative, associative_vxp);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_assoc_across_r21-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_assoc_across_r21 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referrer-associative-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_associative()
            .find(|z| z.1.from == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referrer-associative-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_assoc_across_r21;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_assoc_across_r21-emit_binary_main"}}}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Cardinality`][ðŸ¦ž], via _R9_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Cardinality`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Cardinality
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_get_one_card_across_r9;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_uyn = Conditionality::test_default(&mut store);
/// let redundant_pizzas = "abaft_hole".to_owned();
/// let tiny_wing = "alive_rabbits".to_owned();
/// let judicious_town = "snotty_self".to_owned();
/// let object_vxx = Object::new(&mut store, redundant_pizzas, tiny_wing, judicious_town);
/// let cardinality_dxa = Cardinality::test_default(&mut store);
/// let nice_giants = "lamentable_stitch".to_owned();
/// let majestic_support = "pale_ticket".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_uyn, &object_vxx, &cardinality_dxa, nice_giants, majestic_support);
///
/// let cardinality_hwg = sarzak_get_one_card_across_r9!(referrer, store);
/// assert_eq!(&cardinality_dxa, cardinality_hwg);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_card_across_r9-emit_binary_main"}}}
macro_rules! sarzak_get_one_card_across_r9 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_cardinality(&$input.cardinality).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_card_across_r9;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_card_across_r9-emit_binary_main"}}}

/// Macro to traverse [`Cardinality`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R9(c)_
///
/// This macro expects a &[`Cardinality`][ðŸ¦€], and returns an Option<&[`Referrer`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Cardinality
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak_maybe_get_many_r_froms_across_r9;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_wyr = Conditionality::test_default(&mut store);
/// let simplistic_wave = "faithful_payment".to_owned();
/// let yummy_giants = "exclusive_body".to_owned();
/// let brawny_banana = "amazing_nest".to_owned();
/// let object_pla = Object::new(&mut store, simplistic_wave, yummy_giants, brawny_banana);
/// let cardinality_rwq = Cardinality::test_default(&mut store);
/// let merciful_spoon = "imaginary_button".to_owned();
/// let silly_plant = "open_truck".to_owned();
///
/// let referrer = Referrer::new(&mut store, &conditionality_wyr, &object_pla, &cardinality_rwq, merciful_spoon, silly_plant);
/// let referrer_yyb = sarzak_maybe_get_many_r_froms_across_r9!(cardinality_rwq, store);
///
/// assert!(referrer_yyb.iter().find(|&x| **x == referrer).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_froms_across_r9-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_froms_across_r9 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"cardinality-referrer-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_referrer()
            .filter_map(|z| if z.1.cardinality == $input.get_id() { Some(z.1) } else { None })
            .collect::<Vec<&Referrer>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"cardinality-referrer-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_froms_across_r9;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_froms_across_r9-emit_binary_main"}}}

/// Macro to traverse [`Attribute`][ðŸ¦€] âž¡ [`Type`][ðŸ¦ž], via _R2_
///
/// This macro expects a &[`Attribute`][ðŸ¦€], and returns a &[`Type`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Attribute
/// [ðŸ¦ž]: crate::sarzak::types::Type
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak_get_one_t_across_r2;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let seemly_sand = "direful_table".to_owned();
/// let complex_ray = "shaky_harbor".to_owned();
/// let electric_clocks = "savory_rat".to_owned();
/// let object = Object::new(&mut store, seemly_sand, complex_ray, electric_clocks);
/// let type_fth = Type::test_default(&mut store);
/// let next_touch = "momentous_needle".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_fth, next_touch);
///
/// let type_ycy = sarzak_get_one_t_across_r2!(attribute, store);
/// assert_eq!(&type_fth, type_ycy);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_t_across_r2-emit_binary_main"}}}
macro_rules! sarzak_get_one_t_across_r2 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"ty-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_ty(&$input.ty).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"ty-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_t_across_r2;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_t_across_r2-emit_binary_main"}}}

/// Macro to traverse [`Type`][ðŸ¦€] âž¡ [`Attribute`][ðŸ¦ž], via _R2_
///
/// This macro expects a &[`Type`][ðŸ¦€], and returns a &[`Attribute`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Type
/// [ðŸ¦ž]: crate::sarzak::types::Attribute
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_a_across_r2;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let tense_bite = "lush_yak".to_owned();
/// let old_fashioned_operation = "unhealthy_pail".to_owned();
/// let mature_winter = "fat_journey".to_owned();
/// let object = Object::new(&mut store, tense_bite, old_fashioned_operation, mature_winter);
/// let type_rvt = Type::test_default(&mut store);
/// let protective_good_bye = "confused_chair".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_rvt, protective_good_bye);
/// let attribute_wwg = sarzak_get_one_a_across_r2!(type_rvt, store);
///
/// assert_eq!(&attribute, attribute_wwg);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_a_across_r2-emit_binary_main"}}}
macro_rules! sarzak_get_one_a_across_r2 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"ty-attribute-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_attribute()
            .find(|z| z.1.ty == $input.get_id())
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"ty-attribute-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_a_across_r2;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_a_across_r2-emit_binary_main"}}}

/// Macro to traverse [`Binary`][ðŸ¦€] âž¡ [`Referrer`][ðŸ¦ž], via _R6_
///
/// This macro expects a &[`Binary`][ðŸ¦€], and returns a &[`Referrer`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Binary
/// [ðŸ¦ž]: crate::sarzak::types::Referrer
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak_get_one_r_from_across_r6;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_rri = Conditionality::test_default(&mut store);
/// let uptight_comb = "domineering_plant".to_owned();
/// let nosy_number = "accidental_cow".to_owned();
/// let bad_cough = "short_scarf".to_owned();
/// let object_mlf = Object::new(&mut store, uptight_comb, nosy_number, bad_cough);
/// let cardinality_kgw = Cardinality::test_default(&mut store);
/// let chemical_reason = "dry_bears".to_owned();
/// let referent_ylx = Referent::new(&mut store, &conditionality_rri, &object_mlf, &cardinality_kgw, chemical_reason);
/// let conditionality_gnd = Conditionality::test_default(&mut store);
/// let blue_carriage = "lethal_eye".to_owned();
/// let rustic_paint = "unequal_approval".to_owned();
/// let panoramic_army = "youthful_body".to_owned();
/// let object_byr = Object::new(&mut store, blue_carriage, rustic_paint, panoramic_army);
/// let cardinality_tct = Cardinality::test_default(&mut store);
/// let scientific_relation = "forgetful_view".to_owned();
/// let uptight_self = "jumbled_home".to_owned();
/// let referrer_yyr = Referrer::new(&mut store, &conditionality_gnd, &object_byr, &cardinality_tct, scientific_relation, uptight_self);
///
/// let binary = Binary::new(&mut store, &referent_ylx, &referrer_yyr, 42);
///
/// let referrer_ciq = sarzak_get_one_r_from_across_r6!(binary, store);
/// assert_eq!(&referrer_yyr, referrer_ciq);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_from_across_r6-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_from_across_r6 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referrer-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_referrer(&$input.from).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referrer-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_from_across_r6;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_from_across_r6-emit_binary_main"}}}

/// Macro to traverse [`Referrer`][ðŸ¦€] âž¡ [`Binary`][ðŸ¦ž], via _R6_
///
/// This macro expects a &[`Referrer`][ðŸ¦€], and returns a &[`Binary`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referrer
/// [ðŸ¦ž]: crate::sarzak::types::Binary
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak_get_one_r_bin_across_r6;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_wwj = Conditionality::test_default(&mut store);
/// let tasteless_collar = "animated_drain".to_owned();
/// let intelligent_basin = "racial_kittens".to_owned();
/// let hanging_morning = "needless_power".to_owned();
/// let object_gjt = Object::new(&mut store, tasteless_collar, intelligent_basin, hanging_morning);
/// let cardinality_mul = Cardinality::test_default(&mut store);
/// let impartial_quiver = "hollow_fiction".to_owned();
/// let referent_mhl = Referent::new(&mut store, &conditionality_wwj, &object_gjt, &cardinality_mul, impartial_quiver);
/// let conditionality_sbx = Conditionality::test_default(&mut store);
/// let mundane_throat = "gaudy_bell".to_owned();
/// let male_tent = "apathetic_plot".to_owned();
/// let aspiring_basketball = "wooden_downtown".to_owned();
/// let object_kdk = Object::new(&mut store, mundane_throat, male_tent, aspiring_basketball);
/// let cardinality_drg = Cardinality::test_default(&mut store);
/// let humorous_morning = "magical_rabbit".to_owned();
/// let fearless_opinion = "judicious_mind".to_owned();
/// let referrer_hmf = Referrer::new(&mut store, &conditionality_sbx, &object_kdk, &cardinality_drg, humorous_morning, fearless_opinion);
///
/// let binary = Binary::new(&mut store, &referent_mhl, &referrer_hmf, 42);
/// let binary_smv = sarzak_get_one_r_bin_across_r6!(referrer_hmf, store);
///
/// assert_eq!(&binary, binary_smv);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_bin_across_r6-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_bin_across_r6 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referrer-binary-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_binary()
            .find(|z| z.1.from == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referrer-binary-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_bin_across_r6;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_bin_across_r6-emit_binary_main"}}}

/// Macro to traverse [`Event`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R19_
///
/// This macro expects a &[`Event`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Event
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_obj_across_r19;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let true_aftermath = "whole_tongue".to_owned();
/// let simple_friend = "rhetorical_suit".to_owned();
/// let heavy_poison = "tranquil_tooth".to_owned();
/// let object_kcm = Object::new(&mut store, true_aftermath, simple_friend, heavy_poison);
/// let familiar_potato = "huge_lunch".to_owned();
///
/// let event = Event::new(&mut store, &object_kcm, familiar_potato);
///
/// let object_nln = sarzak_get_one_obj_across_r19!(event, store);
/// assert_eq!(&object_kcm, object_nln);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r19-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r19 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r19;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r19-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Event`][ðŸ¦ž], via _R19(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Event`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Event
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Event;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_many_es_across_r19;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let royal_ant = "faint_balloon".to_owned();
/// let barbarous_rose = "judicious_cactus".to_owned();
/// let extra_large_representative = "pricey_minister".to_owned();
/// let object_wpa = Object::new(&mut store, royal_ant, barbarous_rose, extra_large_representative);
/// let white_school = "half_fork".to_owned();
///
/// let event = Event::new(&mut store, &object_wpa, white_school);
/// let event_nvy = sarzak_maybe_get_many_es_across_r19!(object_wpa, store);
///
/// assert!(event_nvy.iter().find(|&x| **x == event).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_es_across_r19-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_es_across_r19 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-event-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_event()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Event>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-event-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_es_across_r19;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_es_across_r19-emit_binary_main"}}}

/// Macro to traverse [`Attribute`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R1(c)_
///
/// This macro expects a &[`Attribute`][ðŸ¦€], and returns an Option<&[`Object`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Attribute
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_maybe_get_one_obj_across_r1;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let hallowed_flower = "magical_kittens".to_owned();
/// let six_fiction = "frantic_rub".to_owned();
/// let hollow_chain = "exultant_twist".to_owned();
/// let object = Object::new(&mut store, hallowed_flower, six_fiction, hollow_chain);
/// let type_qze = Type::test_default(&mut store);
/// let loud_advertisement = "uncovered_surprise".to_owned();
/// let stupid_position = "immense_powder".to_owned();
/// let long_term_sense = "giant_fight".to_owned();
/// let difficult_can = "ill_fated_range".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_qze, loud_advertisement);
///
/// let object_ele = sarzak_maybe_get_one_obj_across_r1!(attribute, store);
/// assert_eq!(Some(&object), object_ele);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_one_obj_across_r1-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_one_obj_across_r1 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_conditional"}}}
        // nut::codegen::template::macros::emit_one_conditional
        match &$input.obj_id {
            Some(i) => $store.exhume_object(i),
            None => None,
        }
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_conditional"}}}
    }};
}
pub use sarzak_maybe_get_one_obj_across_r1;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_one_obj_across_r1-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Attribute`][ðŸ¦ž], via _R1_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns a &[`Attribute`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Attribute
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Type;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Attribute;
/// # use sarzak::sarzak_get_many_as_across_r1;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let rampant_orange = "numerous_ghost".to_owned();
/// let hungry_ocean = "momentous_mind".to_owned();
/// let heady_lock = "dangerous_credit".to_owned();
/// let gruesome_transport = "thoughtless_beggar".to_owned();
/// let vengeful_watch = "lavish_change".to_owned();
/// let ablaze_rain = "giant_hammer".to_owned();
/// let object = Object::new(&mut store, gruesome_transport, vengeful_watch, ablaze_rain);
/// let type_sys = Type::test_default(&mut store);
/// let fearful_water = "crooked_railway".to_owned();
///
/// let attribute = Attribute::new(&mut store, Some(&object), &type_sys, fearful_water);
///
/// let attribute_yjp = sarzak_get_many_as_across_r1!(object, store);
/// assert!(attribute_yjp.iter().find(|&x| **x == attribute).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_many_as_across_r1-emit_binary_main"}}}
macro_rules! sarzak_get_many_as_across_r1 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-attribute-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_attribute()
            .filter_map(|z| if z.1.obj_id == Some($input.id) { Some(z.1) } else { None })
            .collect::<Vec<&Attribute>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-attribute-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_get_many_as_across_r1;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_many_as_across_r1-emit_binary_main"}}}

/// Macro to traverse [`Subtype`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R15_
///
/// This macro expects a &[`Subtype`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Subtype
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak_get_one_obj_across_r15;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let deeply_kitten = "aquatic_governor".to_owned();
/// let nervous_uncle = "better_robin".to_owned();
/// let automatic_flight = "waggish_cracker".to_owned();
/// let object_jwc = Object::new(&mut store, deeply_kitten, nervous_uncle, automatic_flight);
/// let supertype_xdk = Supertype::new(&mut store, &object_jwc);
/// let isa_gcp = Isa::new(&mut store, &supertype_xdk, 42);
/// let absorbed_wire = "chubby_amount".to_owned();
/// let obedient_temper = "knowing_pear".to_owned();
/// let subdued_tree = "illustrious_mailbox".to_owned();
/// let object_zjx = Object::new(&mut store, absorbed_wire, obedient_temper, subdued_tree);
///
/// let subtype = Subtype::new(&mut store, &isa_gcp, &object_zjx);
///
/// let object_ddy = sarzak_get_one_obj_across_r15!(subtype, store);
/// assert_eq!(&object_zjx, object_ddy);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r15-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r15 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r15;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r15-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`Subtype`][ðŸ¦ž], via _R15(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`Subtype`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::Subtype
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Subtype;
/// # use sarzak::sarzak::Supertype;
/// # use sarzak::sarzak::Isa;
/// # use sarzak::sarzak_maybe_get_many_r_subs_across_r15;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let caring_children = "electric_design".to_owned();
/// let abaft_yarn = "blushing_tomatoes".to_owned();
/// let remarkable_dinosaurs = "abnormal_creature".to_owned();
/// let object_bsu = Object::new(&mut store, caring_children, abaft_yarn, remarkable_dinosaurs);
/// let supertype_trz = Supertype::new(&mut store, &object_bsu);
/// let isa_lnq = Isa::new(&mut store, &supertype_trz, 42);
/// let mammoth_year = "dark_crow".to_owned();
/// let jolly_cart = "knotty_collar".to_owned();
/// let naughty_jar = "bad_tax".to_owned();
/// let object_vup = Object::new(&mut store, mammoth_year, jolly_cart, naughty_jar);
///
/// let subtype = Subtype::new(&mut store, &isa_lnq, &object_vup);
/// let subtype_jsl = sarzak_maybe_get_many_r_subs_across_r15!(object_vup, store);
///
/// assert!(subtype_jsl.iter().find(|&x| **x == subtype).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_r_subs_across_r15-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_r_subs_across_r15 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-subtype-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_subtype()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&Subtype>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-subtype-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_r_subs_across_r15;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_r_subs_across_r15-emit_binary_main"}}}

/// Macro to traverse [`Associative`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R23_
///
/// This macro expects a &[`Associative`][ðŸ¦€], and returns a &[`AssociativeReferent`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Associative
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak_get_one_ass_to_across_r23;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ivz = Conditionality::test_default(&mut store);
/// let holistic_twig = "reflective_shop".to_owned();
/// let ignorant_frog = "frantic_insurance".to_owned();
/// let innocent_berry = "changeable_smoke".to_owned();
/// let object_rig = Object::new(&mut store, holistic_twig, ignorant_frog, innocent_berry);
/// let cardinality_nrm = Cardinality::test_default(&mut store);
/// let fearful_exchange = "probable_fight".to_owned();
/// let associative_referent_ipo = AssociativeReferent::new(&mut store, &conditionality_ivz, &object_rig, &cardinality_nrm, fearful_exchange);
/// let conditionality_ssh = Conditionality::test_default(&mut store);
/// let nimble_meeting = "forgetful_frame".to_owned();
/// let possessive_playground = "graceful_slave".to_owned();
/// let jagged_fifth = "foamy_snake".to_owned();
/// let object_ajb = Object::new(&mut store, nimble_meeting, possessive_playground, jagged_fifth);
/// let cardinality_fav = Cardinality::test_default(&mut store);
/// let jumpy_goat = "flagrant_self".to_owned();
/// let associative_referent_pip = AssociativeReferent::new(&mut store, &conditionality_ssh, &object_ajb, &cardinality_fav, jumpy_goat);
/// let sick_alley = "young_chair".to_owned();
/// let fallacious_good_bye = "learned_club".to_owned();
/// let sparkling_kite = "vague_clover".to_owned();
/// let object_fxu = Object::new(&mut store, sick_alley, fallacious_good_bye, sparkling_kite);
/// let cardinality_ldt = Cardinality::test_default(&mut store);
/// let responsible_attack = "alike_bread".to_owned();
/// let steady_support = "hard_to_find_stream".to_owned();
/// let associative_referrer_eog = AssociativeReferrer::new(&mut store, &object_fxu, &cardinality_ldt, responsible_attack, steady_support);
///
/// let associative = Associative::new(&mut store, &associative_referent_ipo, &associative_referent_pip, &associative_referrer_eog, 42);
///
/// let associative_referent_htj = sarzak_get_one_ass_to_across_r23!(associative, store);
/// assert_eq!(&associative_referent_ipo, associative_referent_htj);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_ass_to_across_r23-emit_binary_main"}}}
macro_rules! sarzak_get_one_ass_to_across_r23 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_associative_referent(&$input.one).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_ass_to_across_r23;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_ass_to_across_r23-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Associative`][ðŸ¦ž], via _R23_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Associative`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Associative
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferrer;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Associative;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_get_one_r_assoc_across_r23;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ngs = Conditionality::test_default(&mut store);
/// let labored_clouds = "tedious_eggs".to_owned();
/// let woebegone_receipt = "ablaze_fork".to_owned();
/// let chief_sea = "tranquil_ray".to_owned();
/// let object_kud = Object::new(&mut store, labored_clouds, woebegone_receipt, chief_sea);
/// let cardinality_mwf = Cardinality::test_default(&mut store);
/// let murky_cloud = "chivalrous_straw".to_owned();
/// let associative_referent_aqv = AssociativeReferent::new(&mut store, &conditionality_ngs, &object_kud, &cardinality_mwf, murky_cloud);
/// let conditionality_mth = Conditionality::test_default(&mut store);
/// let raspy_dirt = "eager_planes".to_owned();
/// let condemned_join = "slow_trees".to_owned();
/// let stupendous_weather = "famous_milk".to_owned();
/// let object_yra = Object::new(&mut store, raspy_dirt, condemned_join, stupendous_weather);
/// let cardinality_qlv = Cardinality::test_default(&mut store);
/// let clumsy_underwear = "exuberant_balls".to_owned();
/// let associative_referent_ibk = AssociativeReferent::new(&mut store, &conditionality_mth, &object_yra, &cardinality_qlv, clumsy_underwear);
/// let stormy_trousers = "healthy_walk".to_owned();
/// let steady_wall = "amuck_string".to_owned();
/// let mere_airport = "optimal_appliance".to_owned();
/// let object_ptk = Object::new(&mut store, stormy_trousers, steady_wall, mere_airport);
/// let cardinality_fop = Cardinality::test_default(&mut store);
/// let vacuous_experience = "cool_slip".to_owned();
/// let naive_treatment = "subsequent_substance".to_owned();
/// let associative_referrer_bad = AssociativeReferrer::new(&mut store, &object_ptk, &cardinality_fop, vacuous_experience, naive_treatment);
///
/// let associative = Associative::new(&mut store, &associative_referent_aqv, &associative_referent_ibk, &associative_referrer_bad, 42);
/// let associative_kzw = sarzak_get_one_r_assoc_across_r23!(associative_referent_aqv, store);
///
/// assert_eq!(&associative, associative_kzw);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_assoc_across_r23-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_assoc_across_r23 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_associative()
            .find(|z| z.1.one == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"associative_referent-associative-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_assoc_across_r23;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_assoc_across_r23-emit_binary_main"}}}

/// Macro to traverse [`AssociativeReferent`][ðŸ¦€] âž¡ [`Object`][ðŸ¦ž], via _R25_
///
/// This macro expects a &[`AssociativeReferent`][ðŸ¦€], and returns a &[`Object`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::AssociativeReferent
/// [ðŸ¦ž]: crate::sarzak::types::Object
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_get_one_obj_across_r25;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_nse = Conditionality::test_default(&mut store);
/// let needy_push = "obtainable_air".to_owned();
/// let macabre_limit = "resonant_desire".to_owned();
/// let robust_pets = "black_stop".to_owned();
/// let object_wvi = Object::new(&mut store, needy_push, macabre_limit, robust_pets);
/// let cardinality_omk = Cardinality::test_default(&mut store);
/// let unbecoming_veil = "obnoxious_stranger".to_owned();
///
/// let associative_referent = AssociativeReferent::new(&mut store, &conditionality_nse, &object_wvi, &cardinality_omk, unbecoming_veil);
///
/// let object_cvd = sarzak_get_one_obj_across_r25!(associative_referent, store);
/// assert_eq!(&object_wvi, object_cvd);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_obj_across_r25-emit_binary_main"}}}
macro_rules! sarzak_get_one_obj_across_r25 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_object(&$input.obj_id).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_obj_across_r25;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_obj_across_r25-emit_binary_main"}}}

/// Macro to traverse [`Object`][ðŸ¦€] âž¡ [`AssociativeReferent`][ðŸ¦ž], via _R25(c)_
///
/// This macro expects a &[`Object`][ðŸ¦€], and returns an Option<&[`AssociativeReferent`][ðŸ¦ž]>.
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Object
/// [ðŸ¦ž]: crate::sarzak::types::AssociativeReferent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::AssociativeReferent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak_maybe_get_many_ass_tos_across_r25;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_jub = Conditionality::test_default(&mut store);
/// let careful_brush = "greasy_laborer".to_owned();
/// let undesirable_harmony = "salty_knot".to_owned();
/// let disgusted_crayon = "infamous_pen".to_owned();
/// let object_yxu = Object::new(&mut store, careful_brush, undesirable_harmony, disgusted_crayon);
/// let cardinality_cjd = Cardinality::test_default(&mut store);
/// let cut_daughter = "offbeat_week".to_owned();
///
/// let associative_referent = AssociativeReferent::new(&mut store, &conditionality_jub, &object_yxu, &cardinality_cjd, cut_daughter);
/// let associative_referent_dis = sarzak_maybe_get_many_ass_tos_across_r25!(object_yxu, store);
///
/// assert!(associative_referent_dis.iter().find(|&x| **x == associative_referent).is_some());
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_maybe_get_many_ass_tos_across_r25-emit_binary_main"}}}
macro_rules! sarzak_maybe_get_many_ass_tos_across_r25 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"object-associative_referent-emit_many_conditional_lookup"}}}
        // nut::codegen::template::macros::emit_many_conditional_lookup
        $store
            .iter_associative_referent()
            .filter_map(|z| if z.1.obj_id == $input.id { Some(z.1) } else { None })
            .collect::<Vec<&AssociativeReferent>>()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"object-associative_referent-emit_many_conditional_lookup"}}}
    }};
}
pub use sarzak_maybe_get_many_ass_tos_across_r25;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_maybe_get_many_ass_tos_across_r25-emit_binary_main"}}}

/// Macro to traverse [`Binary`][ðŸ¦€] âž¡ [`Referent`][ðŸ¦ž], via _R5_
///
/// This macro expects a &[`Binary`][ðŸ¦€], and returns a &[`Referent`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referrer_to_referent_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Binary
/// [ðŸ¦ž]: crate::sarzak::types::Referent
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak_get_one_r_to_across_r5;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_ifu = Conditionality::test_default(&mut store);
/// let astonishing_map = "merciful_decision".to_owned();
/// let impossible_finger = "tasteless_digestion".to_owned();
/// let disillusioned_shoe = "earsplitting_flower".to_owned();
/// let object_gzo = Object::new(&mut store, astonishing_map, impossible_finger, disillusioned_shoe);
/// let cardinality_zov = Cardinality::test_default(&mut store);
/// let outstanding_root = "enormous_station".to_owned();
/// let referent_vos = Referent::new(&mut store, &conditionality_ifu, &object_gzo, &cardinality_zov, outstanding_root);
/// let conditionality_asp = Conditionality::test_default(&mut store);
/// let hungry_knowledge = "unable_books".to_owned();
/// let lowly_party = "glib_plane".to_owned();
/// let purple_station = "dull_earth".to_owned();
/// let object_ymr = Object::new(&mut store, hungry_knowledge, lowly_party, purple_station);
/// let cardinality_pjm = Cardinality::test_default(&mut store);
/// let undesirable_railway = "fascinated_walk".to_owned();
/// let medical_pump = "black_destruction".to_owned();
/// let referrer_fgf = Referrer::new(&mut store, &conditionality_asp, &object_ymr, &cardinality_pjm, undesirable_railway, medical_pump);
///
/// let binary = Binary::new(&mut store, &referent_vos, &referrer_fgf, 42);
///
/// let referent_csa = sarzak_get_one_r_to_across_r5!(binary, store);
/// assert_eq!(&referent_vos, referent_csa);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_to_across_r5-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_to_across_r5 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referent-emit_one_unconditional"}}}
        // nut::codegen::template::macros::emit_one_unconditional
        $store.exhume_referent(&$input.to).unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referent-emit_one_unconditional"}}}
    }};
}
pub use sarzak_get_one_r_to_across_r5;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_to_across_r5-emit_binary_main"}}}

/// Macro to traverse [`Referent`][ðŸ¦€] âž¡ [`Binary`][ðŸ¦ž], via _R5_
///
/// This macro expects a &[`Referent`][ðŸ¦€], and returns a &[`Binary`][ðŸ¦ž].
///
/// Generated by `nut::domain::generate_macros::generate_binary_macro_referent_to_referrer_imp`
///
/// [ðŸ¦€]: crate::sarzak::types::Referent
/// [ðŸ¦ž]: crate::sarzak::types::Binary
// {"magic":"îž¨","kind":{"IgnoreBlockBegin":{}}}
///
/// # Example
///
///```
/// # use sarzak::sarzak::Conditionality;
/// # use sarzak::sarzak::Referent;
/// # use sarzak::sarzak::Object;
/// # use sarzak::sarzak::Cardinality;
/// # use sarzak::sarzak::Referrer;
/// # use sarzak::sarzak::Binary;
/// # use sarzak::sarzak_get_one_r_bin_across_r5;
/// # let mut store = sarzak::sarzak::ObjectStore::new();
///
/// let conditionality_jet = Conditionality::test_default(&mut store);
/// let bright_regret = "bashful_harmony".to_owned();
/// let interesting_brain = "round_death".to_owned();
/// let nutritious_bucket = "needy_level".to_owned();
/// let object_xhw = Object::new(&mut store, bright_regret, interesting_brain, nutritious_bucket);
/// let cardinality_mgj = Cardinality::test_default(&mut store);
/// let bewildered_fish = "embarrassed_crush".to_owned();
/// let referent_tjq = Referent::new(&mut store, &conditionality_jet, &object_xhw, &cardinality_mgj, bewildered_fish);
/// let conditionality_coe = Conditionality::test_default(&mut store);
/// let assorted_condition = "careless_eyes".to_owned();
/// let alive_street = "angry_fire".to_owned();
/// let dry_recess = "innocent_star".to_owned();
/// let object_ntj = Object::new(&mut store, assorted_condition, alive_street, dry_recess);
/// let cardinality_tqc = Cardinality::test_default(&mut store);
/// let obscene_kitty = "curly_dogs".to_owned();
/// let hospitable_cloud = "rare_arch".to_owned();
/// let referrer_smz = Referrer::new(&mut store, &conditionality_coe, &object_ntj, &cardinality_tqc, obscene_kitty, hospitable_cloud);
///
/// let binary = Binary::new(&mut store, &referent_tjq, &referrer_smz, 42);
/// let binary_obf = sarzak_get_one_r_bin_across_r5!(referent_tjq, store);
///
/// assert_eq!(&binary, binary_obf);
///```
// {"magic":"îž¨","kind":"IgnoreBlockEnd"}
#[macro_export]
// {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"sarzak_get_one_r_bin_across_r5-emit_binary_main"}}}
macro_rules! sarzak_get_one_r_bin_across_r5 {
    ($input:expr, $store:expr) => {{
        // {"magic":"îž¨","kind":{"CriticalBlockBegin":{"tag":"referent-binary-emit_one_unconditional_lookup"}}}
        // nut::codegen::template::macros::emit_one_unconditional_lookup
        $store
            .iter_binary()
            .find(|z| z.1.to == $input.id)
            .map(|z| z.1)
            .unwrap()
        // {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"referent-binary-emit_one_unconditional_lookup"}}}
    }};
}
pub use sarzak_get_one_r_bin_across_r5;
// {"magic":"îž¨","kind":{"CriticalBlockEnd":{"tag":"sarzak_get_one_r_bin_across_r5-emit_binary_main"}}}
